
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007100  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007290  08007290  00008290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007300  08007300  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007300  08007300  00008300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007308  08007308  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007308  08007308  00008308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800730c  0800730c  0000830c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007310  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          000004a0  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000504  20000504  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192c7  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000433c  00000000  00000000  0002235b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00026698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a8  00000000  00000000  00027d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026544  00000000  00000000  00028ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020419  00000000  00000000  0004f434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df8af  00000000  00000000  0006f84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014f0fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006288  00000000  00000000  0014f140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009b  00000000  00000000  001553c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007278 	.word	0x08007278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007278 	.word	0x08007278

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b3d      	ldr	r3, [pc, #244]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000584:	4a3d      	ldr	r2, [pc, #244]	@ (800067c <MX_ADC1_Init+0x10c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000588:	4b3b      	ldr	r3, [pc, #236]	@ (8000678 <MX_ADC1_Init+0x108>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058e:	4b3a      	ldr	r3, [pc, #232]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000594:	4b38      	ldr	r3, [pc, #224]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000596:	2201      	movs	r2, #1
 8000598:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059a:	4b37      	ldr	r3, [pc, #220]	@ (8000678 <MX_ADC1_Init+0x108>)
 800059c:	2200      	movs	r2, #0
 800059e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a0:	4b35      	ldr	r3, [pc, #212]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a8:	4b33      	ldr	r3, [pc, #204]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ae:	4b32      	ldr	r3, [pc, #200]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005b0:	4a33      	ldr	r2, [pc, #204]	@ (8000680 <MX_ADC1_Init+0x110>)
 80005b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b4:	4b30      	ldr	r3, [pc, #192]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005bc:	2205      	movs	r2, #5
 80005be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ce:	482a      	ldr	r0, [pc, #168]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005d0:	f001 fcec 	bl	8001fac <HAL_ADC_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005da:	f000 fefc 	bl	80013d6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005de:	2308      	movs	r3, #8
 80005e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	4822      	ldr	r0, [pc, #136]	@ (8000678 <MX_ADC1_Init+0x108>)
 80005f0:	f001 fe4e 	bl	8002290 <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005fa:	f000 feec 	bl	80013d6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005fe:	2309      	movs	r3, #9
 8000600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	481b      	ldr	r0, [pc, #108]	@ (8000678 <MX_ADC1_Init+0x108>)
 800060c:	f001 fe40 	bl	8002290 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000616:	f000 fede 	bl	80013d6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800061a:	230a      	movs	r3, #10
 800061c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800061e:	2303      	movs	r3, #3
 8000620:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	4619      	mov	r1, r3
 8000626:	4814      	ldr	r0, [pc, #80]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000628:	f001 fe32 	bl	8002290 <HAL_ADC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000632:	f000 fed0 	bl	80013d6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000636:	230b      	movs	r3, #11
 8000638:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800063a:	2304      	movs	r3, #4
 800063c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	4619      	mov	r1, r3
 8000642:	480d      	ldr	r0, [pc, #52]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000644:	f001 fe24 	bl	8002290 <HAL_ADC_ConfigChannel>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800064e:	f000 fec2 	bl	80013d6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000652:	230c      	movs	r3, #12
 8000654:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000656:	2305      	movs	r3, #5
 8000658:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	@ (8000678 <MX_ADC1_Init+0x108>)
 8000660:	f001 fe16 	bl	8002290 <HAL_ADC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800066a:	f000 feb4 	bl	80013d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000080 	.word	0x20000080
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a3c      	ldr	r2, [pc, #240]	@ (8000794 <HAL_ADC_MspInit+0x110>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d171      	bne.n	800078a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 80006b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006b6:	4b38      	ldr	r3, [pc, #224]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b34      	ldr	r3, [pc, #208]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a33      	ldr	r2, [pc, #204]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b31      	ldr	r3, [pc, #196]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <HAL_ADC_MspInit+0x114>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006fa:	2307      	movs	r3, #7
 80006fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	2303      	movs	r3, #3
 8000700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	4823      	ldr	r0, [pc, #140]	@ (800079c <HAL_ADC_MspInit+0x118>)
 800070e:	f002 fd73 	bl	80031f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000712:	2303      	movs	r3, #3
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	2303      	movs	r3, #3
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	481e      	ldr	r0, [pc, #120]	@ (80007a0 <HAL_ADC_MspInit+0x11c>)
 8000726:	f002 fd67 	bl	80031f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800072a:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 800072c:	4a1e      	ldr	r2, [pc, #120]	@ (80007a8 <HAL_ADC_MspInit+0x124>)
 800072e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000730:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000736:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 8000744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000748:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 800074c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000750:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 8000754:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000758:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 800075c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000760:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076e:	480d      	ldr	r0, [pc, #52]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 8000770:	f002 f940 	bl	80029f4 <HAL_DMA_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800077a:	f000 fe2c 	bl	80013d6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 8000782:	639a      	str	r2, [r3, #56]	@ 0x38
 8000784:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <HAL_ADC_MspInit+0x120>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40012000 	.word	0x40012000
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020400 	.word	0x40020400
 80007a4:	200000c8 	.word	0x200000c8
 80007a8:	40026410 	.word	0x40026410

080007ac <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2108      	movs	r1, #8
 80007b4:	4802      	ldr	r0, [pc, #8]	@ (80007c0 <button_init+0x14>)
 80007b6:	f002 febb 	bl	8003530 <HAL_GPIO_WritePin>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40020c00 	.word	0x40020c00

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_DMA_Init+0x3c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000800 <MX_DMA_Init+0x3c>)
 80007d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_DMA_Init+0x3c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2038      	movs	r0, #56	@ 0x38
 80007ec:	f002 f8cb 	bl	8002986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007f0:	2038      	movs	r0, #56	@ 0x38
 80007f2:	f002 f8e4 	bl	80029be <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	@ 0x38
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000830:	4b2f      	ldr	r3, [pc, #188]	@ (80008f0 <MX_FSMC_Init+0xec>)
 8000832:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000836:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000838:	4b2d      	ldr	r3, [pc, #180]	@ (80008f0 <MX_FSMC_Init+0xec>)
 800083a:	4a2e      	ldr	r2, [pc, #184]	@ (80008f4 <MX_FSMC_Init+0xf0>)
 800083c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800083e:	4b2c      	ldr	r3, [pc, #176]	@ (80008f0 <MX_FSMC_Init+0xec>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000844:	4b2a      	ldr	r3, [pc, #168]	@ (80008f0 <MX_FSMC_Init+0xec>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800084a:	4b29      	ldr	r3, [pc, #164]	@ (80008f0 <MX_FSMC_Init+0xec>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <MX_FSMC_Init+0xec>)
 8000852:	2210      	movs	r2, #16
 8000854:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000856:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <MX_FSMC_Init+0xec>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <MX_FSMC_Init+0xec>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000862:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <MX_FSMC_Init+0xec>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000868:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <MX_FSMC_Init+0xec>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800086e:	4b20      	ldr	r3, [pc, #128]	@ (80008f0 <MX_FSMC_Init+0xec>)
 8000870:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000874:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000876:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <MX_FSMC_Init+0xec>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_FSMC_Init+0xec>)
 800087e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000882:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <MX_FSMC_Init+0xec>)
 8000886:	2200      	movs	r2, #0
 8000888:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800088a:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <MX_FSMC_Init+0xec>)
 800088c:	2200      	movs	r2, #0
 800088e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000890:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <MX_FSMC_Init+0xec>)
 8000892:	2200      	movs	r2, #0
 8000894:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000896:	230f      	movs	r3, #15
 8000898:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800089a:	230f      	movs	r3, #15
 800089c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800089e:	233c      	movs	r3, #60	@ 0x3c
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80008a6:	2310      	movs	r3, #16
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80008aa:	2311      	movs	r3, #17
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80008b2:	2308      	movs	r3, #8
 80008b4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80008b6:	230f      	movs	r3, #15
 80008b8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008ba:	2309      	movs	r3, #9
 80008bc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008c2:	2310      	movs	r3, #16
 80008c4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008c6:	2311      	movs	r3, #17
 80008c8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008ce:	463a      	mov	r2, r7
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <MX_FSMC_Init+0xec>)
 80008d8:	f003 feb0 	bl	800463c <HAL_SRAM_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008e2:	f000 fd78 	bl	80013d6 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008e6:	bf00      	nop
 80008e8:	3738      	adds	r7, #56	@ 0x38
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000128 	.word	0x20000128
 80008f4:	a0000104 	.word	0xa0000104

080008f8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800090c:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <HAL_FSMC_MspInit+0x88>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d131      	bne.n	8000978 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_FSMC_MspInit+0x88>)
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <HAL_FSMC_MspInit+0x8c>)
 8000920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000922:	4a18      	ldr	r2, [pc, #96]	@ (8000984 <HAL_FSMC_MspInit+0x8c>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6393      	str	r3, [r2, #56]	@ 0x38
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <HAL_FSMC_MspInit+0x8c>)
 800092c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000936:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800093a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000948:	230c      	movs	r3, #12
 800094a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4619      	mov	r1, r3
 8000950:	480d      	ldr	r0, [pc, #52]	@ (8000988 <HAL_FSMC_MspInit+0x90>)
 8000952:	f002 fc51 	bl	80031f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000956:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800095a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000968:	230c      	movs	r3, #12
 800096a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	4806      	ldr	r0, [pc, #24]	@ (800098c <HAL_FSMC_MspInit+0x94>)
 8000972:	f002 fc41 	bl	80031f8 <HAL_GPIO_Init>
 8000976:	e000      	b.n	800097a <HAL_FSMC_MspInit+0x82>
    return;
 8000978:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000178 	.word	0x20000178
 8000984:	40023800 	.word	0x40023800
 8000988:	40021000 	.word	0x40021000
 800098c:	40020c00 	.word	0x40020c00

08000990 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000998:	f7ff ffae 	bl	80008f8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	@ 0x38
 80009a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
 80009be:	4b8f      	ldr	r3, [pc, #572]	@ (8000bfc <MX_GPIO_Init+0x258>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a8e      	ldr	r2, [pc, #568]	@ (8000bfc <MX_GPIO_Init+0x258>)
 80009c4:	f043 0310 	orr.w	r3, r3, #16
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b8c      	ldr	r3, [pc, #560]	@ (8000bfc <MX_GPIO_Init+0x258>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0310 	and.w	r3, r3, #16
 80009d2:	623b      	str	r3, [r7, #32]
 80009d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
 80009da:	4b88      	ldr	r3, [pc, #544]	@ (8000bfc <MX_GPIO_Init+0x258>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a87      	ldr	r2, [pc, #540]	@ (8000bfc <MX_GPIO_Init+0x258>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b85      	ldr	r3, [pc, #532]	@ (8000bfc <MX_GPIO_Init+0x258>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	4b81      	ldr	r3, [pc, #516]	@ (8000bfc <MX_GPIO_Init+0x258>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a80      	ldr	r2, [pc, #512]	@ (8000bfc <MX_GPIO_Init+0x258>)
 80009fc:	f043 0320 	orr.w	r3, r3, #32
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b7e      	ldr	r3, [pc, #504]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0320 	and.w	r3, r3, #32
 8000a0a:	61bb      	str	r3, [r7, #24]
 8000a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	4b7a      	ldr	r3, [pc, #488]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a79      	ldr	r2, [pc, #484]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b77      	ldr	r3, [pc, #476]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b73      	ldr	r3, [pc, #460]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a72      	ldr	r2, [pc, #456]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b70      	ldr	r3, [pc, #448]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b6c      	ldr	r3, [pc, #432]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a6b      	ldr	r2, [pc, #428]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b69      	ldr	r3, [pc, #420]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b65      	ldr	r3, [pc, #404]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a64      	ldr	r2, [pc, #400]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b62      	ldr	r3, [pc, #392]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b5e      	ldr	r3, [pc, #376]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a5d      	ldr	r2, [pc, #372]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8000bfc <MX_GPIO_Init+0x258>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2170      	movs	r1, #112	@ 0x70
 8000a9e:	4858      	ldr	r0, [pc, #352]	@ (8000c00 <MX_GPIO_Init+0x25c>)
 8000aa0:	f002 fd46 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8000aaa:	4856      	ldr	r0, [pc, #344]	@ (8000c04 <MX_GPIO_Init+0x260>)
 8000aac:	f002 fd40 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ab6:	4854      	ldr	r0, [pc, #336]	@ (8000c08 <MX_GPIO_Init+0x264>)
 8000ab8:	f002 fd3a 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000ac2:	4852      	ldr	r0, [pc, #328]	@ (8000c0c <MX_GPIO_Init+0x268>)
 8000ac4:	f002 fd34 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ace:	4850      	ldr	r0, [pc, #320]	@ (8000c10 <MX_GPIO_Init+0x26c>)
 8000ad0:	f002 fd2e 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	484e      	ldr	r0, [pc, #312]	@ (8000c14 <MX_GPIO_Init+0x270>)
 8000ada:	f002 fd29 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000ade:	2370      	movs	r3, #112	@ 0x70
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4842      	ldr	r0, [pc, #264]	@ (8000c00 <MX_GPIO_Init+0x25c>)
 8000af6:	f002 fb7f 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000afa:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	483c      	ldr	r0, [pc, #240]	@ (8000c04 <MX_GPIO_Init+0x260>)
 8000b14:	f002 fb70 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000b18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4836      	ldr	r0, [pc, #216]	@ (8000c08 <MX_GPIO_Init+0x264>)
 8000b2e:	f002 fb63 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	482f      	ldr	r0, [pc, #188]	@ (8000c08 <MX_GPIO_Init+0x264>)
 8000b4c:	f002 fb54 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000b50:	23c0      	movs	r3, #192	@ 0xc0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	482b      	ldr	r0, [pc, #172]	@ (8000c10 <MX_GPIO_Init+0x26c>)
 8000b64:	f002 fb48 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000b68:	2330      	movs	r3, #48	@ 0x30
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4822      	ldr	r0, [pc, #136]	@ (8000c04 <MX_GPIO_Init+0x260>)
 8000b7c:	f002 fb3c 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000b80:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	481c      	ldr	r0, [pc, #112]	@ (8000c0c <MX_GPIO_Init+0x268>)
 8000b9a:	f002 fb2d 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000b9e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <MX_GPIO_Init+0x260>)
 8000bb4:	f002 fb20 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480f      	ldr	r0, [pc, #60]	@ (8000c10 <MX_GPIO_Init+0x26c>)
 8000bd2:	f002 fb11 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	4809      	ldr	r0, [pc, #36]	@ (8000c14 <MX_GPIO_Init+0x270>)
 8000bee:	f002 fb03 	bl	80031f8 <HAL_GPIO_Init>

}
 8000bf2:	bf00      	nop
 8000bf4:	3738      	adds	r7, #56	@ 0x38
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40021400 	.word	0x40021400
 8000c0c:	40021800 	.word	0x40021800
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40020c00 	.word	0x40020c00

08000c18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_I2C1_Init+0x50>)
 8000c1e:	4a13      	ldr	r2, [pc, #76]	@ (8000c6c <MX_I2C1_Init+0x54>)
 8000c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_I2C1_Init+0x50>)
 8000c24:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <MX_I2C1_Init+0x58>)
 8000c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_I2C1_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_I2C1_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_I2C1_Init+0x50>)
 8000c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <MX_I2C1_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_I2C1_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_I2C1_Init+0x50>)
 8000c56:	f002 fc85 	bl	8003564 <HAL_I2C_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c60:	f000 fbb9 	bl	80013d6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000017c 	.word	0x2000017c
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	000186a0 	.word	0x000186a0

08000c74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	@ (8000cf8 <HAL_I2C_MspInit+0x84>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12b      	bne.n	8000cee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a17      	ldr	r2, [pc, #92]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb2:	23c0      	movs	r3, #192	@ 0xc0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb6:	2312      	movs	r3, #18
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <HAL_I2C_MspInit+0x8c>)
 8000cce:	f002 fa93 	bl	80031f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000cdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	@ 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400

08000d04 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <LCD_WR_REG+0x1c>)
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	8013      	strh	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	600ffffe 	.word	0x600ffffe

08000d24 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <LCD_WR_DATA+0x1c>)
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	8053      	strh	r3, [r2, #2]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	600ffffe 	.word	0x600ffffe

08000d44 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <LCD_RD_DATA+0x20>)
 8000d4c:	885b      	ldrh	r3, [r3, #2]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	b29b      	uxth	r3, r3
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	600ffffe 	.word	0x600ffffe

08000d68 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	4608      	mov	r0, r1
 8000d72:	4611      	mov	r1, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	4623      	mov	r3, r4
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	807b      	strh	r3, [r7, #2]
 8000d82:	4613      	mov	r3, r2
 8000d84:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000d86:	202a      	movs	r0, #42	@ 0x2a
 8000d88:	f7ff ffbc 	bl	8000d04 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	0a1b      	lsrs	r3, r3, #8
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ffc6 	bl	8000d24 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffc0 	bl	8000d24 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ffba 	bl	8000d24 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ffb4 	bl	8000d24 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000dbc:	202b      	movs	r0, #43	@ 0x2b
 8000dbe:	f7ff ffa1 	bl	8000d04 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ffab 	bl	8000d24 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ffa5 	bl	8000d24 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000dda:	883b      	ldrh	r3, [r7, #0]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff9f 	bl	8000d24 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff99 	bl	8000d24 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000df2:	202c      	movs	r0, #44	@ 0x2c
 8000df4:	f7ff ff86 	bl	8000d04 <LCD_WR_REG>
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd90      	pop	{r4, r7, pc}

08000e00 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <lcd_Clear+0x60>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <lcd_Clear+0x60>)
 8000e14:	885b      	ldrh	r3, [r3, #2]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff ffa3 	bl	8000d68 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	81fb      	strh	r3, [r7, #14]
 8000e26:	e011      	b.n	8000e4c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	81bb      	strh	r3, [r7, #12]
 8000e2c:	e006      	b.n	8000e3c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff77 	bl	8000d24 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000e36:	89bb      	ldrh	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	81bb      	strh	r3, [r7, #12]
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <lcd_Clear+0x60>)
 8000e3e:	885b      	ldrh	r3, [r3, #2]
 8000e40:	89ba      	ldrh	r2, [r7, #12]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d3f3      	bcc.n	8000e2e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	81fb      	strh	r3, [r7, #14]
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <lcd_Clear+0x60>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	89fa      	ldrh	r2, [r7, #14]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d3e8      	bcc.n	8000e28 <lcd_Clear+0x28>
		}
	}
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200001d0 	.word	0x200001d0

08000e64 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d007      	beq.n	8000e8e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <lcd_SetDir+0x44>)
 8000e80:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e84:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <lcd_SetDir+0x44>)
 8000e88:	22f0      	movs	r2, #240	@ 0xf0
 8000e8a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000e8c:	e006      	b.n	8000e9c <lcd_SetDir+0x38>
		lcddev.width=240;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <lcd_SetDir+0x44>)
 8000e90:	22f0      	movs	r2, #240	@ 0xf0
 8000e92:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <lcd_SetDir+0x44>)
 8000e96:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000e9a:	805a      	strh	r2, [r3, #2]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	200001d0 	.word	0x200001d0

08000eac <lcd_init>:


void lcd_init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eb6:	48aa      	ldr	r0, [pc, #680]	@ (8001160 <lcd_init+0x2b4>)
 8000eb8:	f002 fb3a 	bl	8003530 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ebc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ec0:	f001 f850 	bl	8001f64 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eca:	48a5      	ldr	r0, [pc, #660]	@ (8001160 <lcd_init+0x2b4>)
 8000ecc:	f002 fb30 	bl	8003530 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ed0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ed4:	f001 f846 	bl	8001f64 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff ffc3 	bl	8000e64 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000ede:	20d3      	movs	r0, #211	@ 0xd3
 8000ee0:	f7ff ff10 	bl	8000d04 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000ee4:	f7ff ff2e 	bl	8000d44 <LCD_RD_DATA>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b9d      	ldr	r3, [pc, #628]	@ (8001164 <lcd_init+0x2b8>)
 8000eee:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000ef0:	f7ff ff28 	bl	8000d44 <LCD_RD_DATA>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b9a      	ldr	r3, [pc, #616]	@ (8001164 <lcd_init+0x2b8>)
 8000efa:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000efc:	f7ff ff22 	bl	8000d44 <LCD_RD_DATA>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b97      	ldr	r3, [pc, #604]	@ (8001164 <lcd_init+0x2b8>)
 8000f06:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000f08:	4b96      	ldr	r3, [pc, #600]	@ (8001164 <lcd_init+0x2b8>)
 8000f0a:	889b      	ldrh	r3, [r3, #4]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b94      	ldr	r3, [pc, #592]	@ (8001164 <lcd_init+0x2b8>)
 8000f12:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000f14:	f7ff ff16 	bl	8000d44 <LCD_RD_DATA>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b91      	ldr	r3, [pc, #580]	@ (8001164 <lcd_init+0x2b8>)
 8000f1e:	889b      	ldrh	r3, [r3, #4]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b8f      	ldr	r3, [pc, #572]	@ (8001164 <lcd_init+0x2b8>)
 8000f26:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000f28:	20cf      	movs	r0, #207	@ 0xcf
 8000f2a:	f7ff feeb 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fef8 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000f34:	20c1      	movs	r0, #193	@ 0xc1
 8000f36:	f7ff fef5 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000f3a:	2030      	movs	r0, #48	@ 0x30
 8000f3c:	f7ff fef2 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000f40:	20ed      	movs	r0, #237	@ 0xed
 8000f42:	f7ff fedf 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000f46:	2064      	movs	r0, #100	@ 0x64
 8000f48:	f7ff feec 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f7ff fee9 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000f52:	2012      	movs	r0, #18
 8000f54:	f7ff fee6 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000f58:	2081      	movs	r0, #129	@ 0x81
 8000f5a:	f7ff fee3 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000f5e:	20e8      	movs	r0, #232	@ 0xe8
 8000f60:	f7ff fed0 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000f64:	2085      	movs	r0, #133	@ 0x85
 8000f66:	f7ff fedd 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000f6a:	2010      	movs	r0, #16
 8000f6c:	f7ff feda 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000f70:	207a      	movs	r0, #122	@ 0x7a
 8000f72:	f7ff fed7 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000f76:	20cb      	movs	r0, #203	@ 0xcb
 8000f78:	f7ff fec4 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000f7c:	2039      	movs	r0, #57	@ 0x39
 8000f7e:	f7ff fed1 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000f82:	202c      	movs	r0, #44	@ 0x2c
 8000f84:	f7ff fece 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff fecb 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000f8e:	2034      	movs	r0, #52	@ 0x34
 8000f90:	f7ff fec8 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000f94:	2002      	movs	r0, #2
 8000f96:	f7ff fec5 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000f9a:	20f7      	movs	r0, #247	@ 0xf7
 8000f9c:	f7ff feb2 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	f7ff febf 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000fa6:	20ea      	movs	r0, #234	@ 0xea
 8000fa8:	f7ff feac 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff feb9 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff feb6 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000fb8:	20c0      	movs	r0, #192	@ 0xc0
 8000fba:	f7ff fea3 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000fbe:	201b      	movs	r0, #27
 8000fc0:	f7ff feb0 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000fc4:	20c1      	movs	r0, #193	@ 0xc1
 8000fc6:	f7ff fe9d 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f7ff feaa 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000fd0:	20c5      	movs	r0, #197	@ 0xc5
 8000fd2:	f7ff fe97 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000fd6:	2030      	movs	r0, #48	@ 0x30
 8000fd8:	f7ff fea4 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000fdc:	2030      	movs	r0, #48	@ 0x30
 8000fde:	f7ff fea1 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000fe2:	20c7      	movs	r0, #199	@ 0xc7
 8000fe4:	f7ff fe8e 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000fe8:	20b7      	movs	r0, #183	@ 0xb7
 8000fea:	f7ff fe9b 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000fee:	2036      	movs	r0, #54	@ 0x36
 8000ff0:	f7ff fe88 	bl	8000d04 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000ff4:	2008      	movs	r0, #8
 8000ff6:	f7ff fe95 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000ffa:	203a      	movs	r0, #58	@ 0x3a
 8000ffc:	f7ff fe82 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001000:	2055      	movs	r0, #85	@ 0x55
 8001002:	f7ff fe8f 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001006:	20b1      	movs	r0, #177	@ 0xb1
 8001008:	f7ff fe7c 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fe89 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001012:	201a      	movs	r0, #26
 8001014:	f7ff fe86 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001018:	20b6      	movs	r0, #182	@ 0xb6
 800101a:	f7ff fe73 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800101e:	200a      	movs	r0, #10
 8001020:	f7ff fe80 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001024:	20a2      	movs	r0, #162	@ 0xa2
 8001026:	f7ff fe7d 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800102a:	20f2      	movs	r0, #242	@ 0xf2
 800102c:	f7ff fe6a 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fe77 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001036:	2026      	movs	r0, #38	@ 0x26
 8001038:	f7ff fe64 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fe71 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001042:	20e0      	movs	r0, #224	@ 0xe0
 8001044:	f7ff fe5e 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001048:	200f      	movs	r0, #15
 800104a:	f7ff fe6b 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800104e:	202a      	movs	r0, #42	@ 0x2a
 8001050:	f7ff fe68 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001054:	2028      	movs	r0, #40	@ 0x28
 8001056:	f7ff fe65 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800105a:	2008      	movs	r0, #8
 800105c:	f7ff fe62 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001060:	200e      	movs	r0, #14
 8001062:	f7ff fe5f 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001066:	2008      	movs	r0, #8
 8001068:	f7ff fe5c 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800106c:	2054      	movs	r0, #84	@ 0x54
 800106e:	f7ff fe59 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001072:	20a9      	movs	r0, #169	@ 0xa9
 8001074:	f7ff fe56 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001078:	2043      	movs	r0, #67	@ 0x43
 800107a:	f7ff fe53 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800107e:	200a      	movs	r0, #10
 8001080:	f7ff fe50 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001084:	200f      	movs	r0, #15
 8001086:	f7ff fe4d 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff fe4a 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fe47 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff fe44 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fe41 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80010a2:	20e1      	movs	r0, #225	@ 0xe1
 80010a4:	f7ff fe2e 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fe3b 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80010ae:	2015      	movs	r0, #21
 80010b0:	f7ff fe38 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80010b4:	2017      	movs	r0, #23
 80010b6:	f7ff fe35 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80010ba:	2007      	movs	r0, #7
 80010bc:	f7ff fe32 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80010c0:	2011      	movs	r0, #17
 80010c2:	f7ff fe2f 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80010c6:	2006      	movs	r0, #6
 80010c8:	f7ff fe2c 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80010cc:	202b      	movs	r0, #43	@ 0x2b
 80010ce:	f7ff fe29 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80010d2:	2056      	movs	r0, #86	@ 0x56
 80010d4:	f7ff fe26 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80010d8:	203c      	movs	r0, #60	@ 0x3c
 80010da:	f7ff fe23 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80010de:	2005      	movs	r0, #5
 80010e0:	f7ff fe20 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80010e4:	2010      	movs	r0, #16
 80010e6:	f7ff fe1d 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010ea:	200f      	movs	r0, #15
 80010ec:	f7ff fe1a 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80010f0:	203f      	movs	r0, #63	@ 0x3f
 80010f2:	f7ff fe17 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80010f6:	203f      	movs	r0, #63	@ 0x3f
 80010f8:	f7ff fe14 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010fc:	200f      	movs	r0, #15
 80010fe:	f7ff fe11 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001102:	202b      	movs	r0, #43	@ 0x2b
 8001104:	f7ff fdfe 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fe0b 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fe08 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fe05 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800111a:	203f      	movs	r0, #63	@ 0x3f
 800111c:	f7ff fe02 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001120:	202a      	movs	r0, #42	@ 0x2a
 8001122:	f7ff fdef 	bl	8000d04 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fdfc 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff fdf9 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fdf6 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001138:	20ef      	movs	r0, #239	@ 0xef
 800113a:	f7ff fdf3 	bl	8000d24 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800113e:	2011      	movs	r0, #17
 8001140:	f7ff fde0 	bl	8000d04 <LCD_WR_REG>
	HAL_Delay(120);
 8001144:	2078      	movs	r0, #120	@ 0x78
 8001146:	f000 ff0d 	bl	8001f64 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800114a:	2029      	movs	r0, #41	@ 0x29
 800114c:	f7ff fdda 	bl	8000d04 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001156:	4804      	ldr	r0, [pc, #16]	@ (8001168 <lcd_init+0x2bc>)
 8001158:	f002 f9ea 	bl	8003530 <HAL_GPIO_WritePin>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020800 	.word	0x40020800
 8001164:	200001d0 	.word	0x200001d0
 8001168:	40020000 	.word	0x40020000

0800116c <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001170:	4b3f      	ldr	r3, [pc, #252]	@ (8001270 <led7_Scan+0x104>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <led7_Scan+0x104>)
 800117a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800117c:	4b3d      	ldr	r3, [pc, #244]	@ (8001274 <led7_Scan+0x108>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a3d      	ldr	r2, [pc, #244]	@ (8001278 <led7_Scan+0x10c>)
 8001182:	5cd3      	ldrb	r3, [r2, r3]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b39      	ldr	r3, [pc, #228]	@ (8001270 <led7_Scan+0x104>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b36      	ldr	r3, [pc, #216]	@ (8001270 <led7_Scan+0x104>)
 8001196:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001198:	4b36      	ldr	r3, [pc, #216]	@ (8001274 <led7_Scan+0x108>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d847      	bhi.n	8001230 <led7_Scan+0xc4>
 80011a0:	a201      	add	r2, pc, #4	@ (adr r2, 80011a8 <led7_Scan+0x3c>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	080011b9 	.word	0x080011b9
 80011ac:	080011d7 	.word	0x080011d7
 80011b0:	080011f5 	.word	0x080011f5
 80011b4:	08001213 	.word	0x08001213
	case 0:
		spi_buffer |= 0x00b0;
 80011b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001270 <led7_Scan+0x104>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001270 <led7_Scan+0x104>)
 80011c4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80011c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001270 <led7_Scan+0x104>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b27      	ldr	r3, [pc, #156]	@ (8001270 <led7_Scan+0x104>)
 80011d2:	801a      	strh	r2, [r3, #0]
		break;
 80011d4:	e02d      	b.n	8001232 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80011d6:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <led7_Scan+0x104>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <led7_Scan+0x104>)
 80011e2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80011e4:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <led7_Scan+0x104>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	f023 0320 	bic.w	r3, r3, #32
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <led7_Scan+0x104>)
 80011f0:	801a      	strh	r2, [r3, #0]
		break;
 80011f2:	e01e      	b.n	8001232 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <led7_Scan+0x104>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <led7_Scan+0x104>)
 8001200:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <led7_Scan+0x104>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	f023 0310 	bic.w	r3, r3, #16
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <led7_Scan+0x104>)
 800120e:	801a      	strh	r2, [r3, #0]
		break;
 8001210:	e00f      	b.n	8001232 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001212:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <led7_Scan+0x104>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <led7_Scan+0x104>)
 800121e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <led7_Scan+0x104>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <led7_Scan+0x104>)
 800122c:	801a      	strh	r2, [r3, #0]
		break;
 800122e:	e000      	b.n	8001232 <led7_Scan+0xc6>
	default:
		break;
 8001230:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <led7_Scan+0x108>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	425a      	negs	r2, r3
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	bf58      	it	pl
 8001244:	4253      	negpl	r3, r2
 8001246:	4a0b      	ldr	r2, [pc, #44]	@ (8001274 <led7_Scan+0x108>)
 8001248:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2140      	movs	r1, #64	@ 0x40
 800124e:	480b      	ldr	r0, [pc, #44]	@ (800127c <led7_Scan+0x110>)
 8001250:	f002 f96e 	bl	8003530 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001254:	2301      	movs	r3, #1
 8001256:	2202      	movs	r2, #2
 8001258:	4905      	ldr	r1, [pc, #20]	@ (8001270 <led7_Scan+0x104>)
 800125a:	4809      	ldr	r0, [pc, #36]	@ (8001280 <led7_Scan+0x114>)
 800125c:	f002 ffe7 	bl	800422e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001260:	2201      	movs	r2, #1
 8001262:	2140      	movs	r1, #64	@ 0x40
 8001264:	4805      	ldr	r0, [pc, #20]	@ (800127c <led7_Scan+0x110>)
 8001266:	f002 f963 	bl	8003530 <HAL_GPIO_WritePin>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000004 	.word	0x20000004
 8001274:	200001d8 	.word	0x200001d8
 8001278:	20000000 	.word	0x20000000
 800127c:	40021800 	.word	0x40021800
 8001280:	200001f8 	.word	0x200001f8

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001288:	f000 fdfa 	bl	8001e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128c:	f000 f82a 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001290:	f7ff fb88 	bl	80009a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001294:	f000 fb0a 	bl	80018ac <MX_TIM2_Init>
  MX_SPI1_Init();
 8001298:	f000 f972 	bl	8001580 <MX_SPI1_Init>
  MX_FSMC_Init();
 800129c:	f7ff fab2 	bl	8000804 <MX_FSMC_Init>
  MX_I2C1_Init();
 80012a0:	f7ff fcba 	bl	8000c18 <MX_I2C1_Init>
  MX_TIM13_Init();
 80012a4:	f000 fb4e 	bl	8001944 <MX_TIM13_Init>
  MX_DMA_Init();
 80012a8:	f7ff fa8c 	bl	80007c4 <MX_DMA_Init>
  MX_ADC1_Init();
 80012ac:	f7ff f960 	bl	8000570 <MX_ADC1_Init>
  MX_TIM1_Init();
 80012b0:	f000 faac 	bl	800180c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80012b4:	f000 fd04 	bl	8001cc0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012b8:	f000 fcd8 	bl	8001c6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80012bc:	f000 f87c 	bl	80013b8 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fd9d 	bl	8000e00 <lcd_Clear>
 setTimerSendTemp(15000);
 80012c6:	f643 2098 	movw	r0, #15000	@ 0x3a98
 80012ca:	f000 f8e1 	bl	8001490 <setTimerSendTemp>
//		  button_Scan();
//		  test_Esp();
//		  lightProcess();
//		  test_LedDebug();
//	  }
	 if(isFlagSendTemp() == 1)
 80012ce:	f000 f8fd 	bl	80014cc <isFlagSendTemp>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d1fa      	bne.n	80012ce <main+0x4a>
	 {
		 sensor_Read();
 80012d8:	f000 f884 	bl	80013e4 <sensor_Read>
		 uartSendSensor();
 80012dc:	f000 fc96 	bl	8001c0c <uartSendSensor>
	 if(isFlagSendTemp() == 1)
 80012e0:	e7f5      	b.n	80012ce <main+0x4a>
	...

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	@ 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	@ 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f005 fb14 	bl	8006920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <SystemClock_Config+0xcc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	4a27      	ldr	r2, [pc, #156]	@ (80013b0 <SystemClock_Config+0xcc>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	@ 0x40
 8001318:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <SystemClock_Config+0xcc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <SystemClock_Config+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a21      	ldr	r2, [pc, #132]	@ (80013b4 <SystemClock_Config+0xd0>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <SystemClock_Config+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001344:	2301      	movs	r3, #1
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001348:	2310      	movs	r3, #16
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001350:	2300      	movs	r3, #0
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001354:	2308      	movs	r3, #8
 8001356:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001358:	23a8      	movs	r3, #168	@ 0xa8
 800135a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135c:	2302      	movs	r3, #2
 800135e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001360:	2304      	movs	r3, #4
 8001362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fa3f 	bl	80037ec <HAL_RCC_OscConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001374:	f000 f82f 	bl	80013d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001378:	230f      	movs	r3, #15
 800137a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137c:	2302      	movs	r3, #2
 800137e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001384:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800138a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800138e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2105      	movs	r1, #5
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fca0 	bl	8003cdc <HAL_RCC_ClockConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013a2:	f000 f818 	bl	80013d6 <Error_Handler>
  }
}
 80013a6:	bf00      	nop
 80013a8:	3750      	adds	r7, #80	@ 0x50
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	  timer_init();
 80013bc:	f000 f83e 	bl	800143c <timer_init>
	  button_init();
 80013c0:	f7ff f9f4 	bl	80007ac <button_init>
	  lcd_init();
 80013c4:	f7ff fd72 	bl	8000eac <lcd_init>
	  uart_init_esp();
 80013c8:	f000 fb96 	bl	8001af8 <uart_init_esp>
	  setTimer2(50);
 80013cc:	2032      	movs	r0, #50	@ 0x32
 80013ce:	f000 f843 	bl	8001458 <setTimer2>
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013da:	b672      	cpsid	i
}
 80013dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013de:	bf00      	nop
 80013e0:	e7fd      	b.n	80013de <Error_Handler+0x8>
	...

080013e4 <sensor_Read>:

void sensor_init(){
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}

void sensor_Read(){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80013e8:	2205      	movs	r2, #5
 80013ea:	4903      	ldr	r1, [pc, #12]	@ (80013f8 <sensor_Read+0x14>)
 80013ec:	4803      	ldr	r0, [pc, #12]	@ (80013fc <sensor_Read+0x18>)
 80013ee:	f000 fe21 	bl	8002034 <HAL_ADC_Start_DMA>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001e0 	.word	0x200001e0
 80013fc:	20000080 	.word	0x20000080

08001400 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <sensor_GetTemperature+0x30>)
 8001406:	891b      	ldrh	r3, [r3, #8]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001410:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001434 <sensor_GetTemperature+0x34>
 8001414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001418:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001438 <sensor_GetTemperature+0x38>
 800141c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001420:	eef0 7a66 	vmov.f32	s15, s13
}
 8001424:	eeb0 0a67 	vmov.f32	s0, s15
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	200001e0 	.word	0x200001e0
 8001434:	43a50000 	.word	0x43a50000
 8001438:	457ff000 	.word	0x457ff000

0800143c <timer_init>:

uint16_t flag_timerSendTemp = 0;
uint16_t timerSendTemp_counter = 0;
uint16_t timerSendTemp_MUL = 0;

void timer_init(){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001440:	4803      	ldr	r0, [pc, #12]	@ (8001450 <timer_init+0x14>)
 8001442:	f003 f9f7 	bl	8004834 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8001446:	4803      	ldr	r0, [pc, #12]	@ (8001454 <timer_init+0x18>)
 8001448:	f003 f98c 	bl	8004764 <HAL_TIM_Base_Start>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000029c 	.word	0x2000029c
 8001454:	20000254 	.word	0x20000254

08001458 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001462:	4a08      	ldr	r2, [pc, #32]	@ (8001484 <setTimer2+0x2c>)
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <setTimer2+0x2c>)
 800146a:	881a      	ldrh	r2, [r3, #0]
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <setTimer2+0x30>)
 800146e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <setTimer2+0x34>)
 8001472:	2200      	movs	r2, #0
 8001474:	801a      	strh	r2, [r3, #0]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	200001ee 	.word	0x200001ee
 8001488:	200001ec 	.word	0x200001ec
 800148c:	200001ea 	.word	0x200001ea

08001490 <setTimerSendTemp>:

// LAB 8
void setTimerSendTemp(uint16_t duration){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
	timerSendTemp_MUL = duration/TIMER_CYCLE_2;
 800149a:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <setTimerSendTemp+0x2c>)
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	8013      	strh	r3, [r2, #0]
	timerSendTemp_counter = timer2_MUL;
 80014a0:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <setTimerSendTemp+0x30>)
 80014a2:	881a      	ldrh	r2, [r3, #0]
 80014a4:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <setTimerSendTemp+0x34>)
 80014a6:	801a      	strh	r2, [r3, #0]
	flag_timerSendTemp = 0;
 80014a8:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <setTimerSendTemp+0x38>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	801a      	strh	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200001f4 	.word	0x200001f4
 80014c0:	200001ee 	.word	0x200001ee
 80014c4:	200001f2 	.word	0x200001f2
 80014c8:	200001f0 	.word	0x200001f0

080014cc <isFlagSendTemp>:

uint16_t isFlagSendTemp()
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	if(flag_timerSendTemp == 1)
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <isFlagSendTemp+0x24>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d104      	bne.n	80014e2 <isFlagSendTemp+0x16>
	{
		flag_timerSendTemp = 0;
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <isFlagSendTemp+0x24>)
 80014da:	2200      	movs	r2, #0
 80014dc:	801a      	strh	r2, [r3, #0]
		return 1;
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <isFlagSendTemp+0x18>
	}
	return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200001f0 	.word	0x200001f0

080014f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001504:	d12b      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d010      	beq.n	8001530 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	3b01      	subs	r3, #1
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001518:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001524:	2201      	movs	r2, #1
 8001526:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800152a:	881a      	ldrh	r2, [r3, #0]
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800152e:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerSendTemp_counter > 0){
 8001530:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d010      	beq.n	800155a <HAL_TIM_PeriodElapsedCallback+0x66>
			timerSendTemp_counter--;
 8001538:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	3b01      	subs	r3, #1
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001542:	801a      	strh	r2, [r3, #0]
			if(timerSendTemp_counter == 0) {
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d106      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timerSendTemp = 1;
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800154e:	2201      	movs	r2, #1
 8001550:	801a      	strh	r2, [r3, #0]
				timerSendTemp_counter = timerSendTemp_MUL;
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001554:	881a      	ldrh	r2, [r3, #0]
 8001556:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001558:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800155a:	f7ff fe07 	bl	800116c <led7_Scan>
	}
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200001ec 	.word	0x200001ec
 800156c:	200001ea 	.word	0x200001ea
 8001570:	200001ee 	.word	0x200001ee
 8001574:	200001f2 	.word	0x200001f2
 8001578:	200001f0 	.word	0x200001f0
 800157c:	200001f4 	.word	0x200001f4

08001580 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <MX_SPI1_Init+0x64>)
 8001586:	4a18      	ldr	r2, [pc, #96]	@ (80015e8 <MX_SPI1_Init+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <MX_SPI1_Init+0x64>)
 800158c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_SPI1_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_SPI1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_SPI1_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <MX_SPI1_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_SPI1_Init+0x64>)
 80015ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_SPI1_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <MX_SPI1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_SPI1_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <MX_SPI1_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_SPI1_Init+0x64>)
 80015cc:	220a      	movs	r2, #10
 80015ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_SPI1_Init+0x64>)
 80015d2:	f002 fda3 	bl	800411c <HAL_SPI_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015dc:	f7ff fefb 	bl	80013d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200001f8 	.word	0x200001f8
 80015e8:	40013000 	.word	0x40013000

080015ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a19      	ldr	r2, [pc, #100]	@ (8001670 <HAL_SPI_MspInit+0x84>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12b      	bne.n	8001666 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <HAL_SPI_MspInit+0x88>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	4a17      	ldr	r2, [pc, #92]	@ (8001674 <HAL_SPI_MspInit+0x88>)
 8001618:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800161c:	6453      	str	r3, [r2, #68]	@ 0x44
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_SPI_MspInit+0x88>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_SPI_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a10      	ldr	r2, [pc, #64]	@ (8001674 <HAL_SPI_MspInit+0x88>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_SPI_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001646:	2338      	movs	r3, #56	@ 0x38
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001656:	2305      	movs	r3, #5
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	@ (8001678 <HAL_SPI_MspInit+0x8c>)
 8001662:	f001 fdc9 	bl	80031f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	@ 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40013000 	.word	0x40013000
 8001674:	40023800 	.word	0x40023800
 8001678:	40020400 	.word	0x40020400

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <HAL_MspInit+0x4c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	4a0f      	ldr	r2, [pc, #60]	@ (80016c8 <HAL_MspInit+0x4c>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001690:	6453      	str	r3, [r2, #68]	@ 0x44
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <HAL_MspInit+0x4c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <HAL_MspInit+0x4c>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <HAL_MspInit+0x4c>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_MspInit+0x4c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <NMI_Handler+0x4>

080016d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <MemManage_Handler+0x4>

080016e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001722:	f000 fbff 	bl	8001f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <TIM2_IRQHandler+0x10>)
 8001732:	f003 f948 	bl	80049c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000029c 	.word	0x2000029c

08001740 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <USART1_IRQHandler+0x10>)
 8001746:	f004 f883 	bl	8005850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000330 	.word	0x20000330

08001754 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <USART2_IRQHandler+0x10>)
 800175a:	f004 f879 	bl	8005850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000374 	.word	0x20000374

08001768 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <DMA2_Stream0_IRQHandler+0x10>)
 800176e:	f001 fad9 	bl	8002d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200000c8 	.word	0x200000c8

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	@ (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f005 f8ec 	bl	8006988 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20020000 	.word	0x20020000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	20000250 	.word	0x20000250
 80017e4:	20000508 	.word	0x20000508

080017e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <SystemInit+0x20>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <SystemInit+0x20>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001828:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <MX_TIM1_Init+0x98>)
 800182a:	4a1f      	ldr	r2, [pc, #124]	@ (80018a8 <MX_TIM1_Init+0x9c>)
 800182c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800182e:	4b1d      	ldr	r3, [pc, #116]	@ (80018a4 <MX_TIM1_Init+0x98>)
 8001830:	2253      	movs	r2, #83	@ 0x53
 8001832:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <MX_TIM1_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800183a:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <MX_TIM1_Init+0x98>)
 800183c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001840:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001842:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <MX_TIM1_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001848:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <MX_TIM1_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_TIM1_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001854:	4813      	ldr	r0, [pc, #76]	@ (80018a4 <MX_TIM1_Init+0x98>)
 8001856:	f002 ff35 	bl	80046c4 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001860:	f7ff fdb9 	bl	80013d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <MX_TIM1_Init+0x98>)
 8001872:	f003 fa73 	bl	8004d5c <HAL_TIM_ConfigClockSource>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800187c:	f7ff fdab 	bl	80013d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_TIM1_Init+0x98>)
 800188e:	f003 fe3f 	bl	8005510 <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001898:	f7ff fd9d 	bl	80013d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000254 	.word	0x20000254
 80018a8:	40010000 	.word	0x40010000

080018ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	463b      	mov	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <MX_TIM2_Init+0x94>)
 80018ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <MX_TIM2_Init+0x94>)
 80018d2:	f240 3247 	movw	r2, #839	@ 0x347
 80018d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <MX_TIM2_Init+0x94>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80018de:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <MX_TIM2_Init+0x94>)
 80018e0:	2263      	movs	r2, #99	@ 0x63
 80018e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <MX_TIM2_Init+0x94>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <MX_TIM2_Init+0x94>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018f0:	4813      	ldr	r0, [pc, #76]	@ (8001940 <MX_TIM2_Init+0x94>)
 80018f2:	f002 fee7 	bl	80046c4 <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018fc:	f7ff fd6b 	bl	80013d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	4619      	mov	r1, r3
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <MX_TIM2_Init+0x94>)
 800190e:	f003 fa25 	bl	8004d5c <HAL_TIM_ConfigClockSource>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001918:	f7ff fd5d 	bl	80013d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	@ (8001940 <MX_TIM2_Init+0x94>)
 800192a:	f003 fdf1 	bl	8005510 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001934:	f7ff fd4f 	bl	80013d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000029c 	.word	0x2000029c

08001944 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800195c:	4b1e      	ldr	r3, [pc, #120]	@ (80019d8 <MX_TIM13_Init+0x94>)
 800195e:	4a1f      	ldr	r2, [pc, #124]	@ (80019dc <MX_TIM13_Init+0x98>)
 8001960:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001962:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <MX_TIM13_Init+0x94>)
 8001964:	f240 3247 	movw	r2, #839	@ 0x347
 8001968:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196a:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <MX_TIM13_Init+0x94>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001970:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <MX_TIM13_Init+0x94>)
 8001972:	2263      	movs	r2, #99	@ 0x63
 8001974:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <MX_TIM13_Init+0x94>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197c:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <MX_TIM13_Init+0x94>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001982:	4815      	ldr	r0, [pc, #84]	@ (80019d8 <MX_TIM13_Init+0x94>)
 8001984:	f002 fe9e 	bl	80046c4 <HAL_TIM_Base_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800198e:	f7ff fd22 	bl	80013d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001992:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <MX_TIM13_Init+0x94>)
 8001994:	f002 ffbe 	bl	8004914 <HAL_TIM_PWM_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800199e:	f7ff fd1a 	bl	80013d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a2:	2360      	movs	r3, #96	@ 0x60
 80019a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	4807      	ldr	r0, [pc, #28]	@ (80019d8 <MX_TIM13_Init+0x94>)
 80019ba:	f003 f90d 	bl	8004bd8 <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80019c4:	f7ff fd07 	bl	80013d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80019c8:	4803      	ldr	r0, [pc, #12]	@ (80019d8 <MX_TIM13_Init+0x94>)
 80019ca:	f000 f85b 	bl	8001a84 <HAL_TIM_MspPostInit>

}
 80019ce:	bf00      	nop
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200002e4 	.word	0x200002e4
 80019dc:	40001c00 	.word	0x40001c00

080019e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a22      	ldr	r2, [pc, #136]	@ (8001a78 <HAL_TIM_Base_MspInit+0x98>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10e      	bne.n	8001a10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <HAL_TIM_Base_MspInit+0x9c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a20      	ldr	r2, [pc, #128]	@ (8001a7c <HAL_TIM_Base_MspInit+0x9c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <HAL_TIM_Base_MspInit+0x9c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001a0e:	e02e      	b.n	8001a6e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a18:	d116      	bne.n	8001a48 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <HAL_TIM_Base_MspInit+0x9c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	4a16      	ldr	r2, [pc, #88]	@ (8001a7c <HAL_TIM_Base_MspInit+0x9c>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2a:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <HAL_TIM_Base_MspInit+0x9c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	201c      	movs	r0, #28
 8001a3c:	f000 ffa3 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a40:	201c      	movs	r0, #28
 8001a42:	f000 ffbc 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 8001a46:	e012      	b.n	8001a6e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a80 <HAL_TIM_Base_MspInit+0xa0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10d      	bne.n	8001a6e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_TIM_Base_MspInit+0x9c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_TIM_Base_MspInit+0x9c>)
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_TIM_Base_MspInit+0x9c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40001c00 	.word	0x40001c00

08001a84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <HAL_TIM_MspPostInit+0x68>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d11e      	bne.n	8001ae4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_TIM_MspPostInit+0x6c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	4a10      	ldr	r2, [pc, #64]	@ (8001af0 <HAL_TIM_MspPostInit+0x6c>)
 8001ab0:	f043 0320 	orr.w	r3, r3, #32
 8001ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <HAL_TIM_MspPostInit+0x6c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001ad4:	2309      	movs	r3, #9
 8001ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4619      	mov	r1, r3
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <HAL_TIM_MspPostInit+0x70>)
 8001ae0:	f001 fb8a 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40001c00 	.word	0x40001c00
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40021400 	.word	0x40021400

08001af8 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001afc:	2201      	movs	r2, #1
 8001afe:	4906      	ldr	r1, [pc, #24]	@ (8001b18 <uart_init_esp+0x20>)
 8001b00:	4806      	ldr	r0, [pc, #24]	@ (8001b1c <uart_init_esp+0x24>)
 8001b02:	f003 fe74 	bl	80057ee <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8001b06:	2201      	movs	r2, #1
 8001b08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b0c:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <uart_init_esp+0x28>)
 8001b0e:	f001 fd0f 	bl	8003530 <HAL_GPIO_WritePin>
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000032d 	.word	0x2000032d
 8001b1c:	20000374 	.word	0x20000374
 8001b20:	40021400 	.word	0x40021400

08001b24 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8001b30:	887a      	ldrh	r2, [r7, #2]
 8001b32:	230a      	movs	r3, #10
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4803      	ldr	r0, [pc, #12]	@ (8001b44 <uart_EspSendBytes+0x20>)
 8001b38:	f003 fdc7 	bl	80056ca <HAL_UART_Transmit>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000374 	.word	0x20000374

08001b48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a19      	ldr	r2, [pc, #100]	@ (8001bbc <HAL_UART_RxCpltCallback+0x74>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10a      	bne.n	8001b70 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001b5a:	230a      	movs	r3, #10
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4918      	ldr	r1, [pc, #96]	@ (8001bc0 <HAL_UART_RxCpltCallback+0x78>)
 8001b60:	4818      	ldr	r0, [pc, #96]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x7c>)
 8001b62:	f003 fdb2 	bl	80056ca <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001b66:	2201      	movs	r2, #1
 8001b68:	4915      	ldr	r1, [pc, #84]	@ (8001bc0 <HAL_UART_RxCpltCallback+0x78>)
 8001b6a:	4816      	ldr	r0, [pc, #88]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x7c>)
 8001b6c:	f003 fe3f 	bl	80057ee <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a14      	ldr	r2, [pc, #80]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x80>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d11b      	bne.n	8001bb2 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <HAL_UART_RxCpltCallback+0x84>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b4f      	cmp	r3, #79	@ 0x4f
 8001b80:	d103      	bne.n	8001b8a <HAL_UART_RxCpltCallback+0x42>
 8001b82:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <HAL_UART_RxCpltCallback+0x88>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	e00e      	b.n	8001ba8 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_UART_RxCpltCallback+0x84>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b61      	cmp	r3, #97	@ 0x61
 8001b90:	d103      	bne.n	8001b9a <HAL_UART_RxCpltCallback+0x52>
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_UART_RxCpltCallback+0x8c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e006      	b.n	8001ba8 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <HAL_UART_RxCpltCallback+0x84>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b41      	cmp	r3, #65	@ 0x41
 8001ba0:	d102      	bne.n	8001ba8 <HAL_UART_RxCpltCallback+0x60>
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <HAL_UART_RxCpltCallback+0x8c>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4908      	ldr	r1, [pc, #32]	@ (8001bcc <HAL_UART_RxCpltCallback+0x84>)
 8001bac:	480a      	ldr	r0, [pc, #40]	@ (8001bd8 <HAL_UART_RxCpltCallback+0x90>)
 8001bae:	f003 fe1e 	bl	80057ee <HAL_UART_Receive_IT>
	}
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40011000 	.word	0x40011000
 8001bc0:	2000032c 	.word	0x2000032c
 8001bc4:	20000330 	.word	0x20000330
 8001bc8:	40004400 	.word	0x40004400
 8001bcc:	2000032d 	.word	0x2000032d
 8001bd0:	2000032e 	.word	0x2000032e
 8001bd4:	200001dc 	.word	0x200001dc
 8001bd8:	20000374 	.word	0x20000374

08001bdc <convert2str>:
	if(check_esp == 1) return 1;
	return 0;
}

char *convert2str(uint16_t val)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b090      	sub	sp, #64	@ 0x40
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	f107 000c 	add.w	r0, r7, #12
 8001bec:	4a06      	ldr	r2, [pc, #24]	@ (8001c08 <convert2str+0x2c>)
 8001bee:	2132      	movs	r1, #50	@ 0x32
 8001bf0:	f004 fe62 	bl	80068b8 <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 fea9 	bl	8006950 <strdup>
 8001bfe:	4603      	mov	r3, r0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3740      	adds	r7, #64	@ 0x40
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	08007298 	.word	0x08007298

08001c0c <uartSendSensor>:

void uartSendSensor()
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08e      	sub	sp, #56	@ 0x38
 8001c10:	af00      	add	r7, sp, #0
	char str1[50] = "!TEMP:";
 8001c12:	4a15      	ldr	r2, [pc, #84]	@ (8001c68 <uartSendSensor+0x5c>)
 8001c14:	463b      	mov	r3, r7
 8001c16:	6810      	ldr	r0, [r2, #0]
 8001c18:	6018      	str	r0, [r3, #0]
 8001c1a:	8891      	ldrh	r1, [r2, #4]
 8001c1c:	7992      	ldrb	r2, [r2, #6]
 8001c1e:	8099      	strh	r1, [r3, #4]
 8001c20:	719a      	strb	r2, [r3, #6]
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	222b      	movs	r2, #43	@ 0x2b
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 fe79 	bl	8006920 <memset>
	char *str2 = convert2str((uint16_t)sensor_GetTemperature());
 8001c2e:	f7ff fbe7 	bl	8001400 <sensor_GetTemperature>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ffd0 	bl	8001bdc <convert2str>
 8001c3c:	6378      	str	r0, [r7, #52]	@ 0x34
	strcat(str1, str2);
 8001c3e:	463b      	mov	r3, r7
 8001c40:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 fe74 	bl	8006930 <strcat>
	uart_EspSendBytes(str1, strlen(str1));
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fac0 	bl	80001d0 <strlen>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	463b      	mov	r3, r7
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff63 	bl	8001b24 <uart_EspSendBytes>
}
 8001c5e:	bf00      	nop
 8001c60:	3738      	adds	r7, #56	@ 0x38
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	080072a4 	.word	0x080072a4

08001c6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <MX_USART1_UART_Init+0x50>)
 8001c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c90:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c92:	220c      	movs	r2, #12
 8001c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c96:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ca2:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001ca4:	f003 fcc4 	bl	8005630 <HAL_UART_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cae:	f7ff fb92 	bl	80013d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000330 	.word	0x20000330
 8001cbc:	40011000 	.word	0x40011000

08001cc0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <MX_USART2_UART_Init+0x50>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001ccc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cf8:	f003 fc9a 	bl	8005630 <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d02:	f7ff fb68 	bl	80013d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000374 	.word	0x20000374
 8001d10:	40004400 	.word	0x40004400

08001d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	@ 0x30
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a3a      	ldr	r2, [pc, #232]	@ (8001e1c <HAL_UART_MspInit+0x108>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d135      	bne.n	8001da2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	4b39      	ldr	r3, [pc, #228]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	4a38      	ldr	r2, [pc, #224]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001d40:	f043 0310 	orr.w	r3, r3, #16
 8001d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d46:	4b36      	ldr	r3, [pc, #216]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	4b32      	ldr	r3, [pc, #200]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a31      	ldr	r2, [pc, #196]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b2f      	ldr	r3, [pc, #188]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d80:	2307      	movs	r3, #7
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4826      	ldr	r0, [pc, #152]	@ (8001e24 <HAL_UART_MspInit+0x110>)
 8001d8c:	f001 fa34 	bl	80031f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2025      	movs	r0, #37	@ 0x25
 8001d96:	f000 fdf6 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d9a:	2025      	movs	r0, #37	@ 0x25
 8001d9c:	f000 fe0f 	bl	80029be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001da0:	e038      	b.n	8001e14 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a20      	ldr	r2, [pc, #128]	@ (8001e28 <HAL_UART_MspInit+0x114>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d133      	bne.n	8001e14 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbc:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	4a13      	ldr	r2, [pc, #76]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <HAL_UART_MspInit+0x10c>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001de4:	230c      	movs	r3, #12
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df4:	2307      	movs	r3, #7
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <HAL_UART_MspInit+0x110>)
 8001e00:	f001 f9fa 	bl	80031f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	2026      	movs	r0, #38	@ 0x26
 8001e0a:	f000 fdbc 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e0e:	2026      	movs	r0, #38	@ 0x26
 8001e10:	f000 fdd5 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 8001e14:	bf00      	nop
 8001e16:	3730      	adds	r7, #48	@ 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40011000 	.word	0x40011000
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40004400 	.word	0x40004400

08001e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e30:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e32:	490e      	ldr	r1, [pc, #56]	@ (8001e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e34:	4a0e      	ldr	r2, [pc, #56]	@ (8001e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a0b      	ldr	r2, [pc, #44]	@ (8001e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e48:	4c0b      	ldr	r4, [pc, #44]	@ (8001e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e56:	f7ff fcc7 	bl	80017e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f004 fd9b 	bl	8006994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5e:	f7ff fa11 	bl	8001284 <main>
  bx  lr    
 8001e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001e70:	08007310 	.word	0x08007310
  ldr r2, =_sbss
 8001e74:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001e78:	20000504 	.word	0x20000504

08001e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC_IRQHandler>
	...

08001e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec0 <HAL_Init+0x40>)
 8001e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <HAL_Init+0x40>)
 8001e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a07      	ldr	r2, [pc, #28]	@ (8001ec0 <HAL_Init+0x40>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f000 fd61 	bl	8002970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eae:	200f      	movs	r0, #15
 8001eb0:	f000 f808 	bl	8001ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb4:	f7ff fbe2 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_InitTick+0x54>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_InitTick+0x58>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fd79 	bl	80029da <HAL_SYSTICK_Config>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00e      	b.n	8001f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b0f      	cmp	r3, #15
 8001ef6:	d80a      	bhi.n	8001f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f000 fd41 	bl	8002986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f04:	4a06      	ldr	r2, [pc, #24]	@ (8001f20 <HAL_InitTick+0x5c>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e000      	b.n	8001f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	20000010 	.word	0x20000010
 8001f20:	2000000c 	.word	0x2000000c

08001f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_IncTick+0x20>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_IncTick+0x24>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_IncTick+0x24>)
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000010 	.word	0x20000010
 8001f48:	200003b8 	.word	0x200003b8

08001f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <HAL_GetTick+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	200003b8 	.word	0x200003b8

08001f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff ffee 	bl	8001f4c <HAL_GetTick>
 8001f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d005      	beq.n	8001f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_Delay+0x44>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f8a:	bf00      	nop
 8001f8c:	f7ff ffde 	bl	8001f4c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d8f7      	bhi.n	8001f8c <HAL_Delay+0x28>
  {
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000010 	.word	0x20000010

08001fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e033      	b.n	800202a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fb5a 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d118      	bne.n	800201c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ff2:	f023 0302 	bic.w	r3, r3, #2
 8001ff6:	f043 0202 	orr.w	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fa68 	bl	80024d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f023 0303 	bic.w	r3, r3, #3
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40
 800201a:	e001      	b.n	8002020 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Start_DMA+0x1e>
 800204e:	2302      	movs	r3, #2
 8002050:	e0e9      	b.n	8002226 <HAL_ADC_Start_DMA+0x1f2>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d018      	beq.n	800209a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002078:	4b6d      	ldr	r3, [pc, #436]	@ (8002230 <HAL_ADC_Start_DMA+0x1fc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a6d      	ldr	r2, [pc, #436]	@ (8002234 <HAL_ADC_Start_DMA+0x200>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9a      	lsrs	r2, r3, #18
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800208c:	e002      	b.n	8002094 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	3b01      	subs	r3, #1
 8002092:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a8:	d107      	bne.n	80020ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	f040 80a1 	bne.w	800220c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002108:	d106      	bne.n	8002118 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f023 0206 	bic.w	r2, r3, #6
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
 8002116:	e002      	b.n	800211e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002126:	4b44      	ldr	r3, [pc, #272]	@ (8002238 <HAL_ADC_Start_DMA+0x204>)
 8002128:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212e:	4a43      	ldr	r2, [pc, #268]	@ (800223c <HAL_ADC_Start_DMA+0x208>)
 8002130:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002136:	4a42      	ldr	r2, [pc, #264]	@ (8002240 <HAL_ADC_Start_DMA+0x20c>)
 8002138:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	4a41      	ldr	r2, [pc, #260]	@ (8002244 <HAL_ADC_Start_DMA+0x210>)
 8002140:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800214a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800215a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800216a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	334c      	adds	r3, #76	@ 0x4c
 8002176:	4619      	mov	r1, r3
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f000 fce8 	bl	8002b50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2b00      	cmp	r3, #0
 800218a:	d12a      	bne.n	80021e2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2d      	ldr	r2, [pc, #180]	@ (8002248 <HAL_ADC_Start_DMA+0x214>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d015      	beq.n	80021c2 <HAL_ADC_Start_DMA+0x18e>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2c      	ldr	r2, [pc, #176]	@ (800224c <HAL_ADC_Start_DMA+0x218>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d105      	bne.n	80021ac <HAL_ADC_Start_DMA+0x178>
 80021a0:	4b25      	ldr	r3, [pc, #148]	@ (8002238 <HAL_ADC_Start_DMA+0x204>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a27      	ldr	r2, [pc, #156]	@ (8002250 <HAL_ADC_Start_DMA+0x21c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d136      	bne.n	8002224 <HAL_ADC_Start_DMA+0x1f0>
 80021b6:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <HAL_ADC_Start_DMA+0x204>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d130      	bne.n	8002224 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d129      	bne.n	8002224 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e020      	b.n	8002224 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a18      	ldr	r2, [pc, #96]	@ (8002248 <HAL_ADC_Start_DMA+0x214>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d11b      	bne.n	8002224 <HAL_ADC_Start_DMA+0x1f0>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d114      	bne.n	8002224 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	e00b      	b.n	8002224 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	f043 0210 	orr.w	r2, r3, #16
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000008 	.word	0x20000008
 8002234:	431bde83 	.word	0x431bde83
 8002238:	40012300 	.word	0x40012300
 800223c:	080026cd 	.word	0x080026cd
 8002240:	08002787 	.word	0x08002787
 8002244:	080027a3 	.word	0x080027a3
 8002248:	40012000 	.word	0x40012000
 800224c:	40012100 	.word	0x40012100
 8002250:	40012200 	.word	0x40012200

08002254 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1c>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e105      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x228>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d925      	bls.n	8002308 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68d9      	ldr	r1, [r3, #12]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	3b1e      	subs	r3, #30
 80022d2:	2207      	movs	r2, #7
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43da      	mvns	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	400a      	ands	r2, r1
 80022e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68d9      	ldr	r1, [r3, #12]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	4603      	mov	r3, r0
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4403      	add	r3, r0
 80022fa:	3b1e      	subs	r3, #30
 80022fc:	409a      	lsls	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	e022      	b.n	800234e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6919      	ldr	r1, [r3, #16]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	2207      	movs	r2, #7
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	400a      	ands	r2, r1
 800232a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	4603      	mov	r3, r0
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4403      	add	r3, r0
 8002344:	409a      	lsls	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b06      	cmp	r3, #6
 8002354:	d824      	bhi.n	80023a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3b05      	subs	r3, #5
 8002368:	221f      	movs	r2, #31
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	3b05      	subs	r3, #5
 8002392:	fa00 f203 	lsl.w	r2, r0, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	635a      	str	r2, [r3, #52]	@ 0x34
 800239e:	e04c      	b.n	800243a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d824      	bhi.n	80023f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	3b23      	subs	r3, #35	@ 0x23
 80023ba:	221f      	movs	r2, #31
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43da      	mvns	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	400a      	ands	r2, r1
 80023c8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	3b23      	subs	r3, #35	@ 0x23
 80023e4:	fa00 f203 	lsl.w	r2, r0, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80023f0:	e023      	b.n	800243a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	3b41      	subs	r3, #65	@ 0x41
 8002404:	221f      	movs	r2, #31
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	400a      	ands	r2, r1
 8002412:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	4618      	mov	r0, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	3b41      	subs	r3, #65	@ 0x41
 800242e:	fa00 f203 	lsl.w	r2, r0, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <HAL_ADC_ConfigChannel+0x234>)
 800243c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a21      	ldr	r2, [pc, #132]	@ (80024c8 <HAL_ADC_ConfigChannel+0x238>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d109      	bne.n	800245c <HAL_ADC_ConfigChannel+0x1cc>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b12      	cmp	r3, #18
 800244e:	d105      	bne.n	800245c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a19      	ldr	r2, [pc, #100]	@ (80024c8 <HAL_ADC_ConfigChannel+0x238>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d123      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x21e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b10      	cmp	r3, #16
 800246c:	d003      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x1e6>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b11      	cmp	r3, #17
 8002474:	d11b      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d111      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <HAL_ADC_ConfigChannel+0x23c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a10      	ldr	r2, [pc, #64]	@ (80024d0 <HAL_ADC_ConfigChannel+0x240>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	0c9a      	lsrs	r2, r3, #18
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024a0:	e002      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f9      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40012300 	.word	0x40012300
 80024c8:	40012000 	.word	0x40012000
 80024cc:	20000008 	.word	0x20000008
 80024d0:	431bde83 	.word	0x431bde83

080024d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024dc:	4b79      	ldr	r3, [pc, #484]	@ (80026c4 <ADC_Init+0x1f0>)
 80024de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	021a      	lsls	r2, r3, #8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800252c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800254e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6899      	ldr	r1, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	4a58      	ldr	r2, [pc, #352]	@ (80026c8 <ADC_Init+0x1f4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800257a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6899      	ldr	r1, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800259c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	e00f      	b.n	80025d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0202 	bic.w	r2, r2, #2
 80025e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e1b      	ldrb	r3, [r3, #24]
 80025ec:	005a      	lsls	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800260e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800261e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	3b01      	subs	r3, #1
 800262c:	035a      	lsls	r2, r3, #13
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	e007      	b.n	8002648 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002646:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	3b01      	subs	r3, #1
 8002664:	051a      	lsls	r2, r3, #20
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800267c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800268a:	025a      	lsls	r2, r3, #9
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	029a      	lsls	r2, r3, #10
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40012300 	.word	0x40012300
 80026c8:	0f000001 	.word	0x0f000001

080026cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d13c      	bne.n	8002760 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12b      	bne.n	8002758 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002704:	2b00      	cmp	r3, #0
 8002706:	d127      	bne.n	8002758 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002720:	2b00      	cmp	r3, #0
 8002722:	d119      	bne.n	8002758 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0220 	bic.w	r2, r2, #32
 8002732:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff fd7b 	bl	8002254 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800275e:	e00e      	b.n	800277e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff fd85 	bl	800227c <HAL_ADC_ErrorCallback>
}
 8002772:	e004      	b.n	800277e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002792:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff fd67 	bl	8002268 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2240      	movs	r2, #64	@ 0x40
 80027b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f043 0204 	orr.w	r2, r3, #4
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7ff fd5a 	bl	800227c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027c8:	bf00      	nop
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027ec:	4013      	ands	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800281c:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <__NVIC_GetPriorityGrouping+0x18>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0307 	and.w	r3, r3, #7
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	2b00      	cmp	r3, #0
 8002844:	db0b      	blt.n	800285e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	4907      	ldr	r1, [pc, #28]	@ (800286c <__NVIC_EnableIRQ+0x38>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2001      	movs	r0, #1
 8002856:	fa00 f202 	lsl.w	r2, r0, r2
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100

08002870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	db0a      	blt.n	800289a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	490c      	ldr	r1, [pc, #48]	@ (80028bc <__NVIC_SetPriority+0x4c>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	440b      	add	r3, r1
 8002894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002898:	e00a      	b.n	80028b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4908      	ldr	r1, [pc, #32]	@ (80028c0 <__NVIC_SetPriority+0x50>)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	3b04      	subs	r3, #4
 80028a8:	0112      	lsls	r2, r2, #4
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	440b      	add	r3, r1
 80028ae:	761a      	strb	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000e100 	.word	0xe000e100
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	@ 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f1c3 0307 	rsb	r3, r3, #7
 80028de:	2b04      	cmp	r3, #4
 80028e0:	bf28      	it	cs
 80028e2:	2304      	movcs	r3, #4
 80028e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d902      	bls.n	80028f4 <NVIC_EncodePriority+0x30>
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3b03      	subs	r3, #3
 80028f2:	e000      	b.n	80028f6 <NVIC_EncodePriority+0x32>
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	401a      	ands	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800290c:	f04f 31ff 	mov.w	r1, #4294967295
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43d9      	mvns	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	4313      	orrs	r3, r2
         );
}
 800291e:	4618      	mov	r0, r3
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800293c:	d301      	bcc.n	8002942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293e:	2301      	movs	r3, #1
 8002940:	e00f      	b.n	8002962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002942:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <SysTick_Config+0x40>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294a:	210f      	movs	r1, #15
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	f7ff ff8e 	bl	8002870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <SysTick_Config+0x40>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295a:	4b04      	ldr	r3, [pc, #16]	@ (800296c <SysTick_Config+0x40>)
 800295c:	2207      	movs	r2, #7
 800295e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	e000e010 	.word	0xe000e010

08002970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff29 	bl	80027d0 <__NVIC_SetPriorityGrouping>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff3e 	bl	8002818 <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff8e 	bl	80028c4 <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff5d 	bl	8002870 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff31 	bl	8002834 <__NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffa2 	bl	800292c <SysTick_Config>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff faa4 	bl	8001f4c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e099      	b.n	8002b44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a30:	e00f      	b.n	8002a52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a32:	f7ff fa8b 	bl	8001f4c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d908      	bls.n	8002a52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e078      	b.n	8002b44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e8      	bne.n	8002a32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4b38      	ldr	r3, [pc, #224]	@ (8002b4c <HAL_DMA_Init+0x158>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0307 	bic.w	r3, r3, #7
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d117      	bne.n	8002b16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00e      	beq.n	8002b16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fb01 	bl	8003100 <DMA_CheckFifoParam>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2240      	movs	r2, #64	@ 0x40
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b12:	2301      	movs	r3, #1
 8002b14:	e016      	b.n	8002b44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fab8 	bl	8003094 <DMA_CalcBaseAndBitshift>
 8002b24:	4603      	mov	r3, r0
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	223f      	movs	r2, #63	@ 0x3f
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	f010803f 	.word	0xf010803f

08002b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Start_IT+0x26>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e040      	b.n	8002bf8 <HAL_DMA_Start_IT+0xa8>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d12f      	bne.n	8002bea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fa4a 	bl	8003038 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	223f      	movs	r2, #63	@ 0x3f
 8002baa:	409a      	lsls	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0216 	orr.w	r2, r2, #22
 8002bbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0208 	orr.w	r2, r2, #8
 8002bd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e005      	b.n	8002bf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c0e:	f7ff f99d 	bl	8001f4c <HAL_GetTick>
 8002c12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d008      	beq.n	8002c32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2280      	movs	r2, #128	@ 0x80
 8002c24:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e052      	b.n	8002cd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0216 	bic.w	r2, r2, #22
 8002c40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <HAL_DMA_Abort+0x62>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0208 	bic.w	r2, r2, #8
 8002c70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c82:	e013      	b.n	8002cac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c84:	f7ff f962 	bl	8001f4c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d90c      	bls.n	8002cac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e015      	b.n	8002cd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e4      	bne.n	8002c84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbe:	223f      	movs	r2, #63	@ 0x3f
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d004      	beq.n	8002cfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2280      	movs	r2, #128	@ 0x80
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00c      	b.n	8002d18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2205      	movs	r2, #5
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d30:	4b8e      	ldr	r3, [pc, #568]	@ (8002f6c <HAL_DMA_IRQHandler+0x248>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a8e      	ldr	r2, [pc, #568]	@ (8002f70 <HAL_DMA_IRQHandler+0x24c>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0a9b      	lsrs	r3, r3, #10
 8002d3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4e:	2208      	movs	r2, #8
 8002d50:	409a      	lsls	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01a      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0204 	bic.w	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d94:	2201      	movs	r2, #1
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d012      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	2201      	movs	r2, #1
 8002db4:	409a      	lsls	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbe:	f043 0202 	orr.w	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	2204      	movs	r2, #4
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d012      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00b      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de8:	2204      	movs	r2, #4
 8002dea:	409a      	lsls	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e00:	2210      	movs	r2, #16
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d043      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03c      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1e:	2210      	movs	r2, #16
 8002e20:	409a      	lsls	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d018      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d024      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
 8002e52:	e01f      	b.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e016      	b.n	8002e94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0208 	bic.w	r2, r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e98:	2220      	movs	r2, #32
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 808f 	beq.w	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8087 	beq.w	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	2220      	movs	r2, #32
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b05      	cmp	r3, #5
 8002ecc:	d136      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0216 	bic.w	r2, r2, #22
 8002edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <HAL_DMA_IRQHandler+0x1da>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0208 	bic.w	r2, r2, #8
 8002f0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f12:	223f      	movs	r2, #63	@ 0x3f
 8002f14:	409a      	lsls	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d07e      	beq.n	8003030 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
        }
        return;
 8002f3a:	e079      	b.n	8003030 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01d      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10d      	bne.n	8002f74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d031      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e02c      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
 8002f6a:	bf00      	nop
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d023      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
 8002f84:	e01e      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10f      	bne.n	8002fb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0210 	bic.w	r2, r2, #16
 8002fa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d032      	beq.n	8003032 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d022      	beq.n	800301e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2205      	movs	r2, #5
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d307      	bcc.n	800300c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f2      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x2cc>
 800300a:	e000      	b.n	800300e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800300c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
 800302e:	e000      	b.n	8003032 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003030:	bf00      	nop
    }
  }
}
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003054:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b40      	cmp	r3, #64	@ 0x40
 8003064:	d108      	bne.n	8003078 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003076:	e007      	b.n	8003088 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3b10      	subs	r3, #16
 80030a4:	4a14      	ldr	r2, [pc, #80]	@ (80030f8 <DMA_CalcBaseAndBitshift+0x64>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ae:	4a13      	ldr	r2, [pc, #76]	@ (80030fc <DMA_CalcBaseAndBitshift+0x68>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d909      	bls.n	80030d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80030d4:	e007      	b.n	80030e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	aaaaaaab 	.word	0xaaaaaaab
 80030fc:	080072c4 	.word	0x080072c4

08003100 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d11f      	bne.n	800315a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d856      	bhi.n	80031ce <DMA_CheckFifoParam+0xce>
 8003120:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <DMA_CheckFifoParam+0x28>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	08003139 	.word	0x08003139
 800312c:	0800314b 	.word	0x0800314b
 8003130:	08003139 	.word	0x08003139
 8003134:	080031cf 	.word	0x080031cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d046      	beq.n	80031d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003148:	e043      	b.n	80031d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003152:	d140      	bne.n	80031d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003158:	e03d      	b.n	80031d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003162:	d121      	bne.n	80031a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d837      	bhi.n	80031da <DMA_CheckFifoParam+0xda>
 800316a:	a201      	add	r2, pc, #4	@ (adr r2, 8003170 <DMA_CheckFifoParam+0x70>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003181 	.word	0x08003181
 8003174:	08003187 	.word	0x08003187
 8003178:	08003181 	.word	0x08003181
 800317c:	08003199 	.word	0x08003199
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e030      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d025      	beq.n	80031de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003196:	e022      	b.n	80031de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031a0:	d11f      	bne.n	80031e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031a6:	e01c      	b.n	80031e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d903      	bls.n	80031b6 <DMA_CheckFifoParam+0xb6>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d003      	beq.n	80031bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031b4:	e018      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
      break;
 80031ba:	e015      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      break;
 80031cc:	e00b      	b.n	80031e6 <DMA_CheckFifoParam+0xe6>
      break;
 80031ce:	bf00      	nop
 80031d0:	e00a      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031d2:	bf00      	nop
 80031d4:	e008      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031d6:	bf00      	nop
 80031d8:	e006      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031da:	bf00      	nop
 80031dc:	e004      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031de:	bf00      	nop
 80031e0:	e002      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80031e2:	bf00      	nop
 80031e4:	e000      	b.n	80031e8 <DMA_CheckFifoParam+0xe8>
      break;
 80031e6:	bf00      	nop
    }
  } 
  
  return status; 
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop

080031f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	@ 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e16b      	b.n	80034ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	f040 815a 	bne.w	80034e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d005      	beq.n	800324a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003246:	2b02      	cmp	r3, #2
 8003248:	d130      	bne.n	80032ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003280:	2201      	movs	r2, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 0201 	and.w	r2, r3, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d017      	beq.n	80032e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d123      	bne.n	800333c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	08da      	lsrs	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3208      	adds	r2, #8
 8003336:	69b9      	ldr	r1, [r7, #24]
 8003338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0203 	and.w	r2, r3, #3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80b4 	beq.w	80034e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	4b60      	ldr	r3, [pc, #384]	@ (8003504 <HAL_GPIO_Init+0x30c>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	4a5f      	ldr	r2, [pc, #380]	@ (8003504 <HAL_GPIO_Init+0x30c>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800338c:	6453      	str	r3, [r2, #68]	@ 0x44
 800338e:	4b5d      	ldr	r3, [pc, #372]	@ (8003504 <HAL_GPIO_Init+0x30c>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339a:	4a5b      	ldr	r2, [pc, #364]	@ (8003508 <HAL_GPIO_Init+0x310>)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a52      	ldr	r2, [pc, #328]	@ (800350c <HAL_GPIO_Init+0x314>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d02b      	beq.n	800341e <HAL_GPIO_Init+0x226>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a51      	ldr	r2, [pc, #324]	@ (8003510 <HAL_GPIO_Init+0x318>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d025      	beq.n	800341a <HAL_GPIO_Init+0x222>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a50      	ldr	r2, [pc, #320]	@ (8003514 <HAL_GPIO_Init+0x31c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01f      	beq.n	8003416 <HAL_GPIO_Init+0x21e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003518 <HAL_GPIO_Init+0x320>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d019      	beq.n	8003412 <HAL_GPIO_Init+0x21a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4e      	ldr	r2, [pc, #312]	@ (800351c <HAL_GPIO_Init+0x324>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_GPIO_Init+0x216>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4d      	ldr	r2, [pc, #308]	@ (8003520 <HAL_GPIO_Init+0x328>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00d      	beq.n	800340a <HAL_GPIO_Init+0x212>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4c      	ldr	r2, [pc, #304]	@ (8003524 <HAL_GPIO_Init+0x32c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <HAL_GPIO_Init+0x20e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003528 <HAL_GPIO_Init+0x330>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_GPIO_Init+0x20a>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00e      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003402:	2308      	movs	r3, #8
 8003404:	e00c      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003406:	2306      	movs	r3, #6
 8003408:	e00a      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800340a:	2305      	movs	r3, #5
 800340c:	e008      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800340e:	2304      	movs	r3, #4
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800341e:	2300      	movs	r3, #0
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003430:	4935      	ldr	r1, [pc, #212]	@ (8003508 <HAL_GPIO_Init+0x310>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800343e:	4b3b      	ldr	r3, [pc, #236]	@ (800352c <HAL_GPIO_Init+0x334>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003462:	4a32      	ldr	r2, [pc, #200]	@ (800352c <HAL_GPIO_Init+0x334>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003468:	4b30      	ldr	r3, [pc, #192]	@ (800352c <HAL_GPIO_Init+0x334>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800348c:	4a27      	ldr	r2, [pc, #156]	@ (800352c <HAL_GPIO_Init+0x334>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003492:	4b26      	ldr	r3, [pc, #152]	@ (800352c <HAL_GPIO_Init+0x334>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b6:	4a1d      	ldr	r2, [pc, #116]	@ (800352c <HAL_GPIO_Init+0x334>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	@ (800352c <HAL_GPIO_Init+0x334>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e0:	4a12      	ldr	r2, [pc, #72]	@ (800352c <HAL_GPIO_Init+0x334>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	f67f ae90 	bls.w	8003214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	3724      	adds	r7, #36	@ 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	40013800 	.word	0x40013800
 800350c:	40020000 	.word	0x40020000
 8003510:	40020400 	.word	0x40020400
 8003514:	40020800 	.word	0x40020800
 8003518:	40020c00 	.word	0x40020c00
 800351c:	40021000 	.word	0x40021000
 8003520:	40021400 	.word	0x40021400
 8003524:	40021800 	.word	0x40021800
 8003528:	40021c00 	.word	0x40021c00
 800352c:	40013c00 	.word	0x40013c00

08003530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800354c:	e003      	b.n	8003556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	041a      	lsls	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	619a      	str	r2, [r3, #24]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e12b      	b.n	80037ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fb72 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	@ 0x24
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c8:	f000 fd80 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4a81      	ldr	r2, [pc, #516]	@ (80037d8 <HAL_I2C_Init+0x274>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d807      	bhi.n	80035e8 <HAL_I2C_Init+0x84>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a80      	ldr	r2, [pc, #512]	@ (80037dc <HAL_I2C_Init+0x278>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	bf94      	ite	ls
 80035e0:	2301      	movls	r3, #1
 80035e2:	2300      	movhi	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e006      	b.n	80035f6 <HAL_I2C_Init+0x92>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a7d      	ldr	r2, [pc, #500]	@ (80037e0 <HAL_I2C_Init+0x27c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bf94      	ite	ls
 80035f0:	2301      	movls	r3, #1
 80035f2:	2300      	movhi	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0e7      	b.n	80037ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a78      	ldr	r2, [pc, #480]	@ (80037e4 <HAL_I2C_Init+0x280>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	0c9b      	lsrs	r3, r3, #18
 8003608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a6a      	ldr	r2, [pc, #424]	@ (80037d8 <HAL_I2C_Init+0x274>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d802      	bhi.n	8003638 <HAL_I2C_Init+0xd4>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3301      	adds	r3, #1
 8003636:	e009      	b.n	800364c <HAL_I2C_Init+0xe8>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	4a69      	ldr	r2, [pc, #420]	@ (80037e8 <HAL_I2C_Init+0x284>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	3301      	adds	r3, #1
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	430b      	orrs	r3, r1
 8003652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800365e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	495c      	ldr	r1, [pc, #368]	@ (80037d8 <HAL_I2C_Init+0x274>)
 8003668:	428b      	cmp	r3, r1
 800366a:	d819      	bhi.n	80036a0 <HAL_I2C_Init+0x13c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e59      	subs	r1, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fbb1 f3f3 	udiv	r3, r1, r3
 800367a:	1c59      	adds	r1, r3, #1
 800367c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003680:	400b      	ands	r3, r1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_I2C_Init+0x138>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1e59      	subs	r1, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fbb1 f3f3 	udiv	r3, r1, r3
 8003694:	3301      	adds	r3, #1
 8003696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369a:	e051      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 800369c:	2304      	movs	r3, #4
 800369e:	e04f      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_I2C_Init+0x168>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e012      	b.n	80036f2 <HAL_I2C_Init+0x18e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	0099      	lsls	r1, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Init+0x196>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e022      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10e      	bne.n	8003720 <HAL_I2C_Init+0x1bc>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e58      	subs	r0, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	440b      	add	r3, r1
 8003710:	fbb0 f3f3 	udiv	r3, r0, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800371e:	e00f      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	0099      	lsls	r1, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	6809      	ldr	r1, [r1, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800376e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6911      	ldr	r1, [r2, #16]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	000186a0 	.word	0x000186a0
 80037dc:	001e847f 	.word	0x001e847f
 80037e0:	003d08ff 	.word	0x003d08ff
 80037e4:	431bde83 	.word	0x431bde83
 80037e8:	10624dd3 	.word	0x10624dd3

080037ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e267      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d075      	beq.n	80038f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380a:	4b88      	ldr	r3, [pc, #544]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b04      	cmp	r3, #4
 8003814:	d00c      	beq.n	8003830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003816:	4b85      	ldr	r3, [pc, #532]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800381e:	2b08      	cmp	r3, #8
 8003820:	d112      	bne.n	8003848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003822:	4b82      	ldr	r3, [pc, #520]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800382e:	d10b      	bne.n	8003848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	4b7e      	ldr	r3, [pc, #504]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05b      	beq.n	80038f4 <HAL_RCC_OscConfig+0x108>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d157      	bne.n	80038f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e242      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x74>
 8003852:	4b76      	ldr	r3, [pc, #472]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a75      	ldr	r2, [pc, #468]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e01d      	b.n	800389c <HAL_RCC_OscConfig+0xb0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0x98>
 800386a:	4b70      	ldr	r3, [pc, #448]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a6f      	ldr	r2, [pc, #444]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b6d      	ldr	r3, [pc, #436]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a6c      	ldr	r2, [pc, #432]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0xb0>
 8003884:	4b69      	ldr	r3, [pc, #420]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a68      	ldr	r2, [pc, #416]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 800388a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b66      	ldr	r3, [pc, #408]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a65      	ldr	r2, [pc, #404]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800389a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fe fb52 	bl	8001f4c <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fe fb4e 	bl	8001f4c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	@ 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e207      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b5b      	ldr	r3, [pc, #364]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0xc0>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fe fb3e 	bl	8001f4c <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fe fb3a 	bl	8001f4c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	@ 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e1f3      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	4b51      	ldr	r3, [pc, #324]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0xe8>
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d063      	beq.n	80039ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003902:	4b4a      	ldr	r3, [pc, #296]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390e:	4b47      	ldr	r3, [pc, #284]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003916:	2b08      	cmp	r3, #8
 8003918:	d11c      	bne.n	8003954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391a:	4b44      	ldr	r3, [pc, #272]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d116      	bne.n	8003954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003926:	4b41      	ldr	r3, [pc, #260]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_RCC_OscConfig+0x152>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d001      	beq.n	800393e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e1c7      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4937      	ldr	r1, [pc, #220]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003952:	e03a      	b.n	80039ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800395c:	4b34      	ldr	r3, [pc, #208]	@ (8003a30 <HAL_RCC_OscConfig+0x244>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fe faf3 	bl	8001f4c <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396a:	f7fe faef 	bl	8001f4c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e1a8      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003988:	4b28      	ldr	r3, [pc, #160]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4925      	ldr	r1, [pc, #148]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
 800399c:	e015      	b.n	80039ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800399e:	4b24      	ldr	r3, [pc, #144]	@ (8003a30 <HAL_RCC_OscConfig+0x244>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fe fad2 	bl	8001f4c <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ac:	f7fe face 	bl	8001f4c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e187      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039be:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d036      	beq.n	8003a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d016      	beq.n	8003a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039de:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <HAL_RCC_OscConfig+0x248>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fe fab2 	bl	8001f4c <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ec:	f7fe faae 	bl	8001f4c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e167      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fe:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <HAL_RCC_OscConfig+0x240>)
 8003a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x200>
 8003a0a:	e01b      	b.n	8003a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0c:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <HAL_RCC_OscConfig+0x248>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a12:	f7fe fa9b 	bl	8001f4c <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a18:	e00e      	b.n	8003a38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1a:	f7fe fa97 	bl	8001f4c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d907      	bls.n	8003a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e150      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	42470000 	.word	0x42470000
 8003a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	4b88      	ldr	r3, [pc, #544]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ea      	bne.n	8003a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8097 	beq.w	8003b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a52:	2300      	movs	r3, #0
 8003a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a56:	4b81      	ldr	r3, [pc, #516]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	4b7d      	ldr	r3, [pc, #500]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a72:	4b7a      	ldr	r3, [pc, #488]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a82:	4b77      	ldr	r3, [pc, #476]	@ (8003c60 <HAL_RCC_OscConfig+0x474>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d118      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8e:	4b74      	ldr	r3, [pc, #464]	@ (8003c60 <HAL_RCC_OscConfig+0x474>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a73      	ldr	r2, [pc, #460]	@ (8003c60 <HAL_RCC_OscConfig+0x474>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fa57 	bl	8001f4c <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa2:	f7fe fa53 	bl	8001f4c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e10c      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8003c60 <HAL_RCC_OscConfig+0x474>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x2ea>
 8003ac8:	4b64      	ldr	r3, [pc, #400]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003acc:	4a63      	ldr	r2, [pc, #396]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad4:	e01c      	b.n	8003b10 <HAL_RCC_OscConfig+0x324>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b05      	cmp	r3, #5
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x30c>
 8003ade:	4b5f      	ldr	r3, [pc, #380]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	4a5e      	ldr	r2, [pc, #376]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003ae4:	f043 0304 	orr.w	r3, r3, #4
 8003ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aea:	4b5c      	ldr	r3, [pc, #368]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aee:	4a5b      	ldr	r2, [pc, #364]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af6:	e00b      	b.n	8003b10 <HAL_RCC_OscConfig+0x324>
 8003af8:	4b58      	ldr	r3, [pc, #352]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afc:	4a57      	ldr	r2, [pc, #348]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b04:	4b55      	ldr	r3, [pc, #340]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	4a54      	ldr	r2, [pc, #336]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f023 0304 	bic.w	r3, r3, #4
 8003b0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d015      	beq.n	8003b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fe fa18 	bl	8001f4c <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b20:	f7fe fa14 	bl	8001f4c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e0cb      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b36:	4b49      	ldr	r3, [pc, #292]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0ee      	beq.n	8003b20 <HAL_RCC_OscConfig+0x334>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b44:	f7fe fa02 	bl	8001f4c <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4c:	f7fe f9fe 	bl	8001f4c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e0b5      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b62:	4b3e      	ldr	r3, [pc, #248]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1ee      	bne.n	8003b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b74:	4b39      	ldr	r3, [pc, #228]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	4a38      	ldr	r2, [pc, #224]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a1 	beq.w	8003ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b8a:	4b34      	ldr	r3, [pc, #208]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d05c      	beq.n	8003c50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d141      	bne.n	8003c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	4b31      	ldr	r3, [pc, #196]	@ (8003c64 <HAL_RCC_OscConfig+0x478>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe f9d2 	bl	8001f4c <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fe f9ce 	bl	8001f4c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e087      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	4b27      	ldr	r3, [pc, #156]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	3b01      	subs	r3, #1
 8003be4:	041b      	lsls	r3, r3, #16
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	491b      	ldr	r1, [pc, #108]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c64 <HAL_RCC_OscConfig+0x478>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fe f9a7 	bl	8001f4c <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c02:	f7fe f9a3 	bl	8001f4c <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e05c      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c14:	4b11      	ldr	r3, [pc, #68]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x416>
 8003c20:	e054      	b.n	8003ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c22:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <HAL_RCC_OscConfig+0x478>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fe f990 	bl	8001f4c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fe f98c 	bl	8001f4c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e045      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c42:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_RCC_OscConfig+0x470>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x444>
 8003c4e:	e03d      	b.n	8003ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e038      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40007000 	.word	0x40007000
 8003c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c68:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <HAL_RCC_OscConfig+0x4ec>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d028      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d121      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d11a      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c98:	4013      	ands	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d111      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800

08003cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0cc      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b68      	ldr	r3, [pc, #416]	@ (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d90c      	bls.n	8003d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b65      	ldr	r3, [pc, #404]	@ (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b63      	ldr	r3, [pc, #396]	@ (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0b8      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d30:	4b59      	ldr	r3, [pc, #356]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a58      	ldr	r2, [pc, #352]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d48:	4b53      	ldr	r3, [pc, #332]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4a52      	ldr	r2, [pc, #328]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d54:	4b50      	ldr	r3, [pc, #320]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	494d      	ldr	r1, [pc, #308]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d044      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d107      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	4b47      	ldr	r3, [pc, #284]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d119      	bne.n	8003dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e07f      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e06f      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003daa:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e067      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dba:	4b37      	ldr	r3, [pc, #220]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f023 0203 	bic.w	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	4934      	ldr	r1, [pc, #208]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dcc:	f7fe f8be 	bl	8001f4c <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd4:	f7fe f8ba 	bl	8001f4c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e04f      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dea:	4b2b      	ldr	r3, [pc, #172]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 020c 	and.w	r2, r3, #12
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d1eb      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b25      	ldr	r3, [pc, #148]	@ (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d20c      	bcs.n	8003e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b22      	ldr	r3, [pc, #136]	@ (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b20      	ldr	r3, [pc, #128]	@ (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e032      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e30:	4b19      	ldr	r3, [pc, #100]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4916      	ldr	r1, [pc, #88]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e4e:	4b12      	ldr	r3, [pc, #72]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	490e      	ldr	r1, [pc, #56]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e62:	f000 f821 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8003e66:	4602      	mov	r2, r0
 8003e68:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	490a      	ldr	r1, [pc, #40]	@ (8003e9c <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	5ccb      	ldrb	r3, [r1, r3]
 8003e76:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe f81e 	bl	8001ec4 <HAL_InitTick>

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023c00 	.word	0x40023c00
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	080072ac 	.word	0x080072ac
 8003ea0:	20000008 	.word	0x20000008
 8003ea4:	2000000c 	.word	0x2000000c

08003ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eac:	b094      	sub	sp, #80	@ 0x50
 8003eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb8:	2300      	movs	r3, #0
 8003eba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ec0:	4b79      	ldr	r3, [pc, #484]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d00d      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	f200 80e1 	bhi.w	8004094 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x34>
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eda:	e0db      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003edc:	4b73      	ldr	r3, [pc, #460]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003ede:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ee0:	e0db      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ee2:	4b73      	ldr	r3, [pc, #460]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ee6:	e0d8      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ef0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d063      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efe:	4b6a      	ldr	r3, [pc, #424]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	099b      	lsrs	r3, r3, #6
 8003f04:	2200      	movs	r2, #0
 8003f06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f12:	2300      	movs	r3, #0
 8003f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	f04f 0000 	mov.w	r0, #0
 8003f22:	f04f 0100 	mov.w	r1, #0
 8003f26:	0159      	lsls	r1, r3, #5
 8003f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f2c:	0150      	lsls	r0, r2, #5
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4621      	mov	r1, r4
 8003f34:	1a51      	subs	r1, r2, r1
 8003f36:	6139      	str	r1, [r7, #16]
 8003f38:	4629      	mov	r1, r5
 8003f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	018b      	lsls	r3, r1, #6
 8003f50:	4651      	mov	r1, sl
 8003f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f56:	4651      	mov	r1, sl
 8003f58:	018a      	lsls	r2, r1, #6
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f60:	4659      	mov	r1, fp
 8003f62:	eb63 0901 	sbc.w	r9, r3, r1
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7a:	4690      	mov	r8, r2
 8003f7c:	4699      	mov	r9, r3
 8003f7e:	4623      	mov	r3, r4
 8003f80:	eb18 0303 	adds.w	r3, r8, r3
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	462b      	mov	r3, r5
 8003f88:	eb49 0303 	adc.w	r3, r9, r3
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	024b      	lsls	r3, r1, #9
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	024a      	lsls	r2, r1, #9
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fae:	2200      	movs	r2, #0
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fb8:	f7fc f962 	bl	8000280 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc4:	e058      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc6:	4b38      	ldr	r3, [pc, #224]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	2200      	movs	r2, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fd6:	623b      	str	r3, [r7, #32]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	f04f 0000 	mov.w	r0, #0
 8003fe8:	f04f 0100 	mov.w	r1, #0
 8003fec:	0159      	lsls	r1, r3, #5
 8003fee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff2:	0150      	lsls	r0, r2, #5
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ffe:	4649      	mov	r1, r9
 8004000:	eb63 0b01 	sbc.w	fp, r3, r1
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004010:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004014:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004018:	ebb2 040a 	subs.w	r4, r2, sl
 800401c:	eb63 050b 	sbc.w	r5, r3, fp
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	00eb      	lsls	r3, r5, #3
 800402a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402e:	00e2      	lsls	r2, r4, #3
 8004030:	4614      	mov	r4, r2
 8004032:	461d      	mov	r5, r3
 8004034:	4643      	mov	r3, r8
 8004036:	18e3      	adds	r3, r4, r3
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	464b      	mov	r3, r9
 800403c:	eb45 0303 	adc.w	r3, r5, r3
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800404e:	4629      	mov	r1, r5
 8004050:	028b      	lsls	r3, r1, #10
 8004052:	4621      	mov	r1, r4
 8004054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004058:	4621      	mov	r1, r4
 800405a:	028a      	lsls	r2, r1, #10
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004062:	2200      	movs	r2, #0
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	61fa      	str	r2, [r7, #28]
 8004068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800406c:	f7fc f908 	bl	8000280 <__aeabi_uldivmod>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4613      	mov	r3, r2
 8004076:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004078:	4b0b      	ldr	r3, [pc, #44]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	3301      	adds	r3, #1
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004088:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800408a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004092:	e002      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004094:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004096:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800409c:	4618      	mov	r0, r3
 800409e:	3750      	adds	r7, #80	@ 0x50
 80040a0:	46bd      	mov	sp, r7
 80040a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	00f42400 	.word	0x00f42400
 80040b0:	007a1200 	.word	0x007a1200

080040b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b8:	4b03      	ldr	r3, [pc, #12]	@ (80040c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ba:	681b      	ldr	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000008 	.word	0x20000008

080040cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040d0:	f7ff fff0 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	0a9b      	lsrs	r3, r3, #10
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4903      	ldr	r1, [pc, #12]	@ (80040f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40023800 	.word	0x40023800
 80040f0:	080072bc 	.word	0x080072bc

080040f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040f8:	f7ff ffdc 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	0b5b      	lsrs	r3, r3, #13
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4903      	ldr	r1, [pc, #12]	@ (8004118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40023800 	.word	0x40023800
 8004118:	080072bc 	.word	0x080072bc

0800411c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07b      	b.n	8004226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800413e:	d009      	beq.n	8004154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	61da      	str	r2, [r3, #28]
 8004146:	e005      	b.n	8004154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fa3c 	bl	80015ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800418a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0104 	and.w	r1, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	f003 0210 	and.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b088      	sub	sp, #32
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_SPI_Transmit+0x22>
 800424c:	2302      	movs	r3, #2
 800424e:	e126      	b.n	800449e <HAL_SPI_Transmit+0x270>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004258:	f7fd fe78 	bl	8001f4c <HAL_GetTick>
 800425c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d002      	beq.n	8004274 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800426e:	2302      	movs	r3, #2
 8004270:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004272:	e10b      	b.n	800448c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Transmit+0x52>
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004284:	e102      	b.n	800448c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2203      	movs	r2, #3
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042cc:	d10f      	bne.n	80042ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d007      	beq.n	800430c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004314:	d14b      	bne.n	80043ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_SPI_Transmit+0xf6>
 800431e:	8afb      	ldrh	r3, [r7, #22]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d13e      	bne.n	80043a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	1c9a      	adds	r2, r3, #2
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004348:	e02b      	b.n	80043a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b02      	cmp	r3, #2
 8004356:	d112      	bne.n	800437e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	1c9a      	adds	r2, r3, #2
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800437c:	e011      	b.n	80043a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800437e:	f7fd fde5 	bl	8001f4c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d803      	bhi.n	8004396 <HAL_SPI_Transmit+0x168>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d102      	bne.n	800439c <HAL_SPI_Transmit+0x16e>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043a0:	e074      	b.n	800448c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1ce      	bne.n	800434a <HAL_SPI_Transmit+0x11c>
 80043ac:	e04c      	b.n	8004448 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_SPI_Transmit+0x18e>
 80043b6:	8afb      	ldrh	r3, [r7, #22]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d140      	bne.n	800443e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	7812      	ldrb	r2, [r2, #0]
 80043c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043e2:	e02c      	b.n	800443e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d113      	bne.n	800441a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004418:	e011      	b.n	800443e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441a:	f7fd fd97 	bl	8001f4c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d803      	bhi.n	8004432 <HAL_SPI_Transmit+0x204>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d102      	bne.n	8004438 <HAL_SPI_Transmit+0x20a>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800443c:	e026      	b.n	800448c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1cd      	bne.n	80043e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	6839      	ldr	r1, [r7, #0]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f8b3 	bl	80045b8 <SPI_EndRxTxTransaction>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	77fb      	strb	r3, [r7, #31]
 8004488:	e000      	b.n	800448c <HAL_SPI_Transmit+0x25e>
  }

error:
 800448a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800449c:	7ffb      	ldrb	r3, [r7, #31]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	4613      	mov	r3, r2
 80044b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044b8:	f7fd fd48 	bl	8001f4c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	4413      	add	r3, r2
 80044c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044c8:	f7fd fd40 	bl	8001f4c <HAL_GetTick>
 80044cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044ce:	4b39      	ldr	r3, [pc, #228]	@ (80045b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	015b      	lsls	r3, r3, #5
 80044d4:	0d1b      	lsrs	r3, r3, #20
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044de:	e054      	b.n	800458a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d050      	beq.n	800458a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044e8:	f7fd fd30 	bl	8001f4c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d902      	bls.n	80044fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d13d      	bne.n	800457a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800450c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004516:	d111      	bne.n	800453c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004520:	d004      	beq.n	800452c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452a:	d107      	bne.n	800453c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800453a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004544:	d10f      	bne.n	8004566 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e017      	b.n	80045aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	3b01      	subs	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d19b      	bne.n	80044e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000008 	.word	0x20000008

080045b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004634 <SPI_EndRxTxTransaction+0x7c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004638 <SPI_EndRxTxTransaction+0x80>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0d5b      	lsrs	r3, r3, #21
 80045d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045d4:	fb02 f303 	mul.w	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045e2:	d112      	bne.n	800460a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2200      	movs	r2, #0
 80045ec:	2180      	movs	r1, #128	@ 0x80
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7ff ff5a 	bl	80044a8 <SPI_WaitFlagStateUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d016      	beq.n	8004628 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fe:	f043 0220 	orr.w	r2, r3, #32
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e00f      	b.n	800462a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	3b01      	subs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004620:	2b80      	cmp	r3, #128	@ 0x80
 8004622:	d0f2      	beq.n	800460a <SPI_EndRxTxTransaction+0x52>
 8004624:	e000      	b.n	8004628 <SPI_EndRxTxTransaction+0x70>
        break;
 8004626:	bf00      	nop
  }

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000008 	.word	0x20000008
 8004638:	165e9f81 	.word	0x165e9f81

0800463c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e034      	b.n	80046bc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7fc f992 	bl	8000990 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3308      	adds	r3, #8
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f002 f84e 	bl	8006718 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	461a      	mov	r2, r3
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	f002 f898 	bl	80067bc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6858      	ldr	r0, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	f002 f8cd 	bl	8006838 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	6892      	ldr	r2, [r2, #8]
 80046a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	6892      	ldr	r2, [r2, #8]
 80046b2:	f041 0101 	orr.w	r1, r1, #1
 80046b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e041      	b.n	800475a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd f978 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f000 fc1a 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e046      	b.n	800480a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a23      	ldr	r2, [pc, #140]	@ (8004818 <HAL_TIM_Base_Start+0xb4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d022      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004796:	d01d      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1f      	ldr	r2, [pc, #124]	@ (800481c <HAL_TIM_Base_Start+0xb8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d018      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004820 <HAL_TIM_Base_Start+0xbc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004824 <HAL_TIM_Base_Start+0xc0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004828 <HAL_TIM_Base_Start+0xc4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a19      	ldr	r2, [pc, #100]	@ (800482c <HAL_TIM_Base_Start+0xc8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_TIM_Base_Start+0x70>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a18      	ldr	r2, [pc, #96]	@ (8004830 <HAL_TIM_Base_Start+0xcc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d111      	bne.n	80047f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b06      	cmp	r3, #6
 80047e4:	d010      	beq.n	8004808 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f6:	e007      	b.n	8004808 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40010000 	.word	0x40010000
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40000c00 	.word	0x40000c00
 8004828:	40010400 	.word	0x40010400
 800482c:	40014000 	.word	0x40014000
 8004830:	40001800 	.word	0x40001800

08004834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	d001      	beq.n	800484c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e04e      	b.n	80048ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a23      	ldr	r2, [pc, #140]	@ (80048f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d022      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x80>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004876:	d01d      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x80>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1f      	ldr	r2, [pc, #124]	@ (80048fc <HAL_TIM_Base_Start_IT+0xc8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d018      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x80>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1e      	ldr	r2, [pc, #120]	@ (8004900 <HAL_TIM_Base_Start_IT+0xcc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d013      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x80>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a1c      	ldr	r2, [pc, #112]	@ (8004904 <HAL_TIM_Base_Start_IT+0xd0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00e      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x80>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1b      	ldr	r2, [pc, #108]	@ (8004908 <HAL_TIM_Base_Start_IT+0xd4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d009      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x80>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a19      	ldr	r2, [pc, #100]	@ (800490c <HAL_TIM_Base_Start_IT+0xd8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x80>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a18      	ldr	r2, [pc, #96]	@ (8004910 <HAL_TIM_Base_Start_IT+0xdc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d111      	bne.n	80048d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d010      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d6:	e007      	b.n	80048e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40010000 	.word	0x40010000
 80048fc:	40000400 	.word	0x40000400
 8004900:	40000800 	.word	0x40000800
 8004904:	40000c00 	.word	0x40000c00
 8004908:	40010400 	.word	0x40010400
 800490c:	40014000 	.word	0x40014000
 8004910:	40001800 	.word	0x40001800

08004914 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e041      	b.n	80049aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f839 	bl	80049b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f000 faf2 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d122      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d11b      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f06f 0202 	mvn.w	r2, #2
 80049f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fa78 	bl	8004efe <HAL_TIM_IC_CaptureCallback>
 8004a0e:	e005      	b.n	8004a1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fa6a 	bl	8004eea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa7b 	bl	8004f12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d122      	bne.n	8004a76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d11b      	bne.n	8004a76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0204 	mvn.w	r2, #4
 8004a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fa4e 	bl	8004efe <HAL_TIM_IC_CaptureCallback>
 8004a62:	e005      	b.n	8004a70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fa40 	bl	8004eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa51 	bl	8004f12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d122      	bne.n	8004aca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d11b      	bne.n	8004aca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f06f 0208 	mvn.w	r2, #8
 8004a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fa24 	bl	8004efe <HAL_TIM_IC_CaptureCallback>
 8004ab6:	e005      	b.n	8004ac4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fa16 	bl	8004eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fa27 	bl	8004f12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b10      	cmp	r3, #16
 8004ad6:	d122      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d11b      	bne.n	8004b1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0210 	mvn.w	r2, #16
 8004aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2208      	movs	r2, #8
 8004af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f9fa 	bl	8004efe <HAL_TIM_IC_CaptureCallback>
 8004b0a:	e005      	b.n	8004b18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f9ec 	bl	8004eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f9fd 	bl	8004f12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d10e      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d107      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0201 	mvn.w	r2, #1
 8004b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7fc fcd5 	bl	80014f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b54:	2b80      	cmp	r3, #128	@ 0x80
 8004b56:	d10e      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b62:	2b80      	cmp	r3, #128	@ 0x80
 8004b64:	d107      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fd53 	bl	800561c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b80:	2b40      	cmp	r3, #64	@ 0x40
 8004b82:	d10e      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8e:	2b40      	cmp	r3, #64	@ 0x40
 8004b90:	d107      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f9c2 	bl	8004f26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d10e      	bne.n	8004bce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0220 	mvn.w	r2, #32
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fd1d 	bl	8005608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0ae      	b.n	8004d54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	f200 809f 	bhi.w	8004d44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c06:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004d45 	.word	0x08004d45
 8004c14:	08004d45 	.word	0x08004d45
 8004c18:	08004d45 	.word	0x08004d45
 8004c1c:	08004c81 	.word	0x08004c81
 8004c20:	08004d45 	.word	0x08004d45
 8004c24:	08004d45 	.word	0x08004d45
 8004c28:	08004d45 	.word	0x08004d45
 8004c2c:	08004cc3 	.word	0x08004cc3
 8004c30:	08004d45 	.word	0x08004d45
 8004c34:	08004d45 	.word	0x08004d45
 8004c38:	08004d45 	.word	0x08004d45
 8004c3c:	08004d03 	.word	0x08004d03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fa18 	bl	800507c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0208 	orr.w	r2, r2, #8
 8004c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0204 	bic.w	r2, r2, #4
 8004c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6999      	ldr	r1, [r3, #24]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	619a      	str	r2, [r3, #24]
      break;
 8004c7e:	e064      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fa68 	bl	800515c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6999      	ldr	r1, [r3, #24]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	021a      	lsls	r2, r3, #8
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	619a      	str	r2, [r3, #24]
      break;
 8004cc0:	e043      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fabd 	bl	8005248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0208 	orr.w	r2, r2, #8
 8004cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0204 	bic.w	r2, r2, #4
 8004cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69d9      	ldr	r1, [r3, #28]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	61da      	str	r2, [r3, #28]
      break;
 8004d00:	e023      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fb11 	bl	8005330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69d9      	ldr	r1, [r3, #28]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	021a      	lsls	r2, r3, #8
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	61da      	str	r2, [r3, #28]
      break;
 8004d42:	e002      	b.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	75fb      	strb	r3, [r7, #23]
      break;
 8004d48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIM_ConfigClockSource+0x1c>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e0b4      	b.n	8004ee2 <HAL_TIM_ConfigClockSource+0x186>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db0:	d03e      	beq.n	8004e30 <HAL_TIM_ConfigClockSource+0xd4>
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db6:	f200 8087 	bhi.w	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dbe:	f000 8086 	beq.w	8004ece <HAL_TIM_ConfigClockSource+0x172>
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc6:	d87f      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b70      	cmp	r3, #112	@ 0x70
 8004dca:	d01a      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0xa6>
 8004dcc:	2b70      	cmp	r3, #112	@ 0x70
 8004dce:	d87b      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd0:	2b60      	cmp	r3, #96	@ 0x60
 8004dd2:	d050      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x11a>
 8004dd4:	2b60      	cmp	r3, #96	@ 0x60
 8004dd6:	d877      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b50      	cmp	r3, #80	@ 0x50
 8004dda:	d03c      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0xfa>
 8004ddc:	2b50      	cmp	r3, #80	@ 0x50
 8004dde:	d873      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b40      	cmp	r3, #64	@ 0x40
 8004de2:	d058      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x13a>
 8004de4:	2b40      	cmp	r3, #64	@ 0x40
 8004de6:	d86f      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de8:	2b30      	cmp	r3, #48	@ 0x30
 8004dea:	d064      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004dec:	2b30      	cmp	r3, #48	@ 0x30
 8004dee:	d86b      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d060      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d867      	bhi.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d05c      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d05a      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e00:	e062      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6899      	ldr	r1, [r3, #8]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f000 fb5d 	bl	80054d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	609a      	str	r2, [r3, #8]
      break;
 8004e2e:	e04f      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	6899      	ldr	r1, [r3, #8]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f000 fb46 	bl	80054d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e52:	609a      	str	r2, [r3, #8]
      break;
 8004e54:	e03c      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6859      	ldr	r1, [r3, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f000 faba 	bl	80053dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2150      	movs	r1, #80	@ 0x50
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fb13 	bl	800549a <TIM_ITRx_SetConfig>
      break;
 8004e74:	e02c      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f000 fad9 	bl	800543a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2160      	movs	r1, #96	@ 0x60
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fb03 	bl	800549a <TIM_ITRx_SetConfig>
      break;
 8004e94:	e01c      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f000 fa9a 	bl	80053dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2140      	movs	r1, #64	@ 0x40
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 faf3 	bl	800549a <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e00c      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f000 faea 	bl	800549a <TIM_ITRx_SetConfig>
      break;
 8004ec6:	e003      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ecc:	e000      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a40      	ldr	r2, [pc, #256]	@ (8005050 <TIM_Base_SetConfig+0x114>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f5a:	d00f      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3d      	ldr	r2, [pc, #244]	@ (8005054 <TIM_Base_SetConfig+0x118>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a3c      	ldr	r2, [pc, #240]	@ (8005058 <TIM_Base_SetConfig+0x11c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800505c <TIM_Base_SetConfig+0x120>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3a      	ldr	r2, [pc, #232]	@ (8005060 <TIM_Base_SetConfig+0x124>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2f      	ldr	r2, [pc, #188]	@ (8005050 <TIM_Base_SetConfig+0x114>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02b      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9c:	d027      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8005054 <TIM_Base_SetConfig+0x118>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d023      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8005058 <TIM_Base_SetConfig+0x11c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01f      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800505c <TIM_Base_SetConfig+0x120>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01b      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a29      	ldr	r2, [pc, #164]	@ (8005060 <TIM_Base_SetConfig+0x124>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d017      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a28      	ldr	r2, [pc, #160]	@ (8005064 <TIM_Base_SetConfig+0x128>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a27      	ldr	r2, [pc, #156]	@ (8005068 <TIM_Base_SetConfig+0x12c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00f      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a26      	ldr	r2, [pc, #152]	@ (800506c <TIM_Base_SetConfig+0x130>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a25      	ldr	r2, [pc, #148]	@ (8005070 <TIM_Base_SetConfig+0x134>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a24      	ldr	r2, [pc, #144]	@ (8005074 <TIM_Base_SetConfig+0x138>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a23      	ldr	r2, [pc, #140]	@ (8005078 <TIM_Base_SetConfig+0x13c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d108      	bne.n	8005000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <TIM_Base_SetConfig+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0xf8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a0c      	ldr	r2, [pc, #48]	@ (8005060 <TIM_Base_SetConfig+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d103      	bne.n	800503c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	615a      	str	r2, [r3, #20]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40010400 	.word	0x40010400
 8005064:	40014000 	.word	0x40014000
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800
 8005070:	40001800 	.word	0x40001800
 8005074:	40001c00 	.word	0x40001c00
 8005078:	40002000 	.word	0x40002000

0800507c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0201 	bic.w	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f023 0302 	bic.w	r3, r3, #2
 80050c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a20      	ldr	r2, [pc, #128]	@ (8005154 <TIM_OC1_SetConfig+0xd8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC1_SetConfig+0x64>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1f      	ldr	r2, [pc, #124]	@ (8005158 <TIM_OC1_SetConfig+0xdc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10c      	bne.n	80050fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0308 	bic.w	r3, r3, #8
 80050e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 0304 	bic.w	r3, r3, #4
 80050f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a15      	ldr	r2, [pc, #84]	@ (8005154 <TIM_OC1_SetConfig+0xd8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_OC1_SetConfig+0x8e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a14      	ldr	r2, [pc, #80]	@ (8005158 <TIM_OC1_SetConfig+0xdc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d111      	bne.n	800512e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	621a      	str	r2, [r3, #32]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	40010000 	.word	0x40010000
 8005158:	40010400 	.word	0x40010400

0800515c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0210 	bic.w	r2, r3, #16
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0320 	bic.w	r3, r3, #32
 80051a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a22      	ldr	r2, [pc, #136]	@ (8005240 <TIM_OC2_SetConfig+0xe4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_OC2_SetConfig+0x68>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a21      	ldr	r2, [pc, #132]	@ (8005244 <TIM_OC2_SetConfig+0xe8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10d      	bne.n	80051e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a17      	ldr	r2, [pc, #92]	@ (8005240 <TIM_OC2_SetConfig+0xe4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_OC2_SetConfig+0x94>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a16      	ldr	r2, [pc, #88]	@ (8005244 <TIM_OC2_SetConfig+0xe8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d113      	bne.n	8005218 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40010000 	.word	0x40010000
 8005244:	40010400 	.word	0x40010400

08005248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a21      	ldr	r2, [pc, #132]	@ (8005328 <TIM_OC3_SetConfig+0xe0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_OC3_SetConfig+0x66>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a20      	ldr	r2, [pc, #128]	@ (800532c <TIM_OC3_SetConfig+0xe4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d10d      	bne.n	80052ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a16      	ldr	r2, [pc, #88]	@ (8005328 <TIM_OC3_SetConfig+0xe0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC3_SetConfig+0x92>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a15      	ldr	r2, [pc, #84]	@ (800532c <TIM_OC3_SetConfig+0xe4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d113      	bne.n	8005302 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40010000 	.word	0x40010000
 800532c:	40010400 	.word	0x40010400

08005330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800537a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	031b      	lsls	r3, r3, #12
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a12      	ldr	r2, [pc, #72]	@ (80053d4 <TIM_OC4_SetConfig+0xa4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_OC4_SetConfig+0x68>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a11      	ldr	r2, [pc, #68]	@ (80053d8 <TIM_OC4_SetConfig+0xa8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d109      	bne.n	80053ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800539e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	019b      	lsls	r3, r3, #6
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40010400 	.word	0x40010400

080053dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f023 0201 	bic.w	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 030a 	bic.w	r3, r3, #10
 8005418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800543a:	b480      	push	{r7}
 800543c:	b087      	sub	sp, #28
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0210 	bic.w	r2, r3, #16
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	031b      	lsls	r3, r3, #12
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005476:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f043 0307 	orr.w	r3, r3, #7
 80054bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	609a      	str	r2, [r3, #8]
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	021a      	lsls	r2, r3, #8
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	609a      	str	r2, [r3, #8]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005524:	2302      	movs	r3, #2
 8005526:	e05a      	b.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a21      	ldr	r2, [pc, #132]	@ (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d022      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005574:	d01d      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1d      	ldr	r2, [pc, #116]	@ (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d018      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1b      	ldr	r2, [pc, #108]	@ (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1a      	ldr	r2, [pc, #104]	@ (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a18      	ldr	r2, [pc, #96]	@ (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a17      	ldr	r2, [pc, #92]	@ (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a15      	ldr	r2, [pc, #84]	@ (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10c      	bne.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40010000 	.word	0x40010000
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40000c00 	.word	0x40000c00
 80055fc:	40010400 	.word	0x40010400
 8005600:	40014000 	.word	0x40014000
 8005604:	40001800 	.word	0x40001800

08005608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e03f      	b.n	80056c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fc fb5c 	bl	8001d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2224      	movs	r2, #36	@ 0x24
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fddb 	bl	8006230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695a      	ldr	r2, [r3, #20]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b08a      	sub	sp, #40	@ 0x28
 80056ce:	af02      	add	r7, sp, #8
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d17c      	bne.n	80057e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <HAL_UART_Transmit+0x2c>
 80056f0:	88fb      	ldrh	r3, [r7, #6]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e075      	b.n	80057e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_UART_Transmit+0x3e>
 8005704:	2302      	movs	r3, #2
 8005706:	e06e      	b.n	80057e6 <HAL_UART_Transmit+0x11c>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2221      	movs	r2, #33	@ 0x21
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800571e:	f7fc fc15 	bl	8001f4c <HAL_GetTick>
 8005722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	88fa      	ldrh	r2, [r7, #6]
 8005728:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	88fa      	ldrh	r2, [r7, #6]
 800572e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005738:	d108      	bne.n	800574c <HAL_UART_Transmit+0x82>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	e003      	b.n	8005754 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800575c:	e02a      	b.n	80057b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2200      	movs	r2, #0
 8005766:	2180      	movs	r1, #128	@ 0x80
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fb1f 	bl	8005dac <UART_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e036      	b.n	80057e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800578c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	3302      	adds	r3, #2
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	e007      	b.n	80057a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	781a      	ldrb	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1cf      	bne.n	800575e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2200      	movs	r2, #0
 80057c6:	2140      	movs	r1, #64	@ 0x40
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 faef 	bl	8005dac <UART_WaitOnFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e006      	b.n	80057e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e000      	b.n	80057e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	4613      	mov	r3, r2
 80057fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b20      	cmp	r3, #32
 8005806:	d11d      	bne.n	8005844 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <HAL_UART_Receive_IT+0x26>
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e016      	b.n	8005846 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_UART_Receive_IT+0x38>
 8005822:	2302      	movs	r3, #2
 8005824:	e00f      	b.n	8005846 <HAL_UART_Receive_IT+0x58>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	461a      	mov	r2, r3
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fb24 	bl	8005e88 <UART_Start_Receive_IT>
 8005840:	4603      	mov	r3, r0
 8005842:	e000      	b.n	8005846 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b0ba      	sub	sp, #232	@ 0xe8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005876:	2300      	movs	r3, #0
 8005878:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800587c:	2300      	movs	r3, #0
 800587e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800588e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10f      	bne.n	80058b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d009      	beq.n	80058b6 <HAL_UART_IRQHandler+0x66>
 80058a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fc03 	bl	80060ba <UART_Receive_IT>
      return;
 80058b4:	e256      	b.n	8005d64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80de 	beq.w	8005a7c <HAL_UART_IRQHandler+0x22c>
 80058c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80d1 	beq.w	8005a7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <HAL_UART_IRQHandler+0xae>
 80058e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f6:	f043 0201 	orr.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <HAL_UART_IRQHandler+0xd2>
 800590a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	f043 0202 	orr.w	r2, r3, #2
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_UART_IRQHandler+0xf6>
 800592e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	f043 0204 	orr.w	r2, r3, #4
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d011      	beq.n	8005976 <HAL_UART_IRQHandler+0x126>
 8005952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800595e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	f043 0208 	orr.w	r2, r3, #8
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 81ed 	beq.w	8005d5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <HAL_UART_IRQHandler+0x14e>
 800598c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fb8e 	bl	80060ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a8:	2b40      	cmp	r3, #64	@ 0x40
 80059aa:	bf0c      	ite	eq
 80059ac:	2301      	moveq	r3, #1
 80059ae:	2300      	movne	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <HAL_UART_IRQHandler+0x17a>
 80059c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d04f      	beq.n	8005a6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa96 	bl	8005efc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059da:	2b40      	cmp	r3, #64	@ 0x40
 80059dc:	d141      	bne.n	8005a62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3314      	adds	r3, #20
 80059e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3314      	adds	r3, #20
 8005a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1d9      	bne.n	80059de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d013      	beq.n	8005a5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	4a7d      	ldr	r2, [pc, #500]	@ (8005c2c <HAL_UART_IRQHandler+0x3dc>)
 8005a38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fd f94e 	bl	8002ce0 <HAL_DMA_Abort_IT>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	e00e      	b.n	8005a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f990 	bl	8005d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	e00a      	b.n	8005a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f98c 	bl	8005d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	e006      	b.n	8005a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f988 	bl	8005d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005a76:	e170      	b.n	8005d5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	bf00      	nop
    return;
 8005a7a:	e16e      	b.n	8005d5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	f040 814a 	bne.w	8005d1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8143 	beq.w	8005d1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 813c 	beq.w	8005d1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac2:	2b40      	cmp	r3, #64	@ 0x40
 8005ac4:	f040 80b4 	bne.w	8005c30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ad4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8140 	beq.w	8005d5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	f080 8139 	bcs.w	8005d5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005af2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afe:	f000 8088 	beq.w	8005c12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1d9      	bne.n	8005b02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3314      	adds	r3, #20
 8005b54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e1      	bne.n	8005b4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e3      	bne.n	8005b8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be2:	f023 0310 	bic.w	r3, r3, #16
 8005be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005bf4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005bf6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e3      	bne.n	8005bd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fc fff7 	bl	8002c00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f8b6 	bl	8005d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c28:	e099      	b.n	8005d5e <HAL_UART_IRQHandler+0x50e>
 8005c2a:	bf00      	nop
 8005c2c:	08005fc3 	.word	0x08005fc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 808b 	beq.w	8005d62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8086 	beq.w	8005d62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e3      	bne.n	8005c56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3314      	adds	r3, #20
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3314      	adds	r3, #20
 8005cae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e3      	bne.n	8005c8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	e853 3f00 	ldrex	r3, [r3]
 8005ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0310 	bic.w	r3, r3, #16
 8005cea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005cf8:	61fa      	str	r2, [r7, #28]
 8005cfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	69b9      	ldr	r1, [r7, #24]
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	617b      	str	r3, [r7, #20]
   return(result);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e3      	bne.n	8005cd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f83e 	bl	8005d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d18:	e023      	b.n	8005d62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_UART_IRQHandler+0x4ea>
 8005d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f959 	bl	8005fea <UART_Transmit_IT>
    return;
 8005d38:	e014      	b.n	8005d64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00e      	beq.n	8005d64 <HAL_UART_IRQHandler+0x514>
 8005d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f999 	bl	800608a <UART_EndTransmit_IT>
    return;
 8005d58:	e004      	b.n	8005d64 <HAL_UART_IRQHandler+0x514>
    return;
 8005d5a:	bf00      	nop
 8005d5c:	e002      	b.n	8005d64 <HAL_UART_IRQHandler+0x514>
      return;
 8005d5e:	bf00      	nop
 8005d60:	e000      	b.n	8005d64 <HAL_UART_IRQHandler+0x514>
      return;
 8005d62:	bf00      	nop
  }
}
 8005d64:	37e8      	adds	r7, #232	@ 0xe8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop

08005d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b090      	sub	sp, #64	@ 0x40
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbc:	e050      	b.n	8005e60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d04c      	beq.n	8005e60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8005dcc:	f7fc f8be 	bl	8001f4c <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d241      	bcs.n	8005e60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005dfc:	637a      	str	r2, [r7, #52]	@ 0x34
 8005dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e5      	bne.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3314      	adds	r3, #20
 8005e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3314      	adds	r3, #20
 8005e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e30:	623a      	str	r2, [r7, #32]
 8005e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	69f9      	ldr	r1, [r7, #28]
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e5      	bne.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e00f      	b.n	8005e80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	bf0c      	ite	eq
 8005e70:	2301      	moveq	r3, #1
 8005e72:	2300      	movne	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d09f      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3740      	adds	r7, #64	@ 0x40
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	4613      	mov	r3, r2
 8005e94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	88fa      	ldrh	r2, [r7, #6]
 8005ea0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	88fa      	ldrh	r2, [r7, #6]
 8005ea6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2222      	movs	r2, #34	@ 0x22
 8005eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ecc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695a      	ldr	r2, [r3, #20]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0220 	orr.w	r2, r2, #32
 8005eec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b095      	sub	sp, #84	@ 0x54
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f24:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e5      	bne.n	8005f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f023 0301 	bic.w	r3, r3, #1
 8005f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3314      	adds	r3, #20
 8005f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e5      	bne.n	8005f38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d119      	bne.n	8005fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f023 0310 	bic.w	r3, r3, #16
 8005f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	330c      	adds	r3, #12
 8005f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f94:	61ba      	str	r2, [r7, #24]
 8005f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6979      	ldr	r1, [r7, #20]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e5      	bne.n	8005f74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fb6:	bf00      	nop
 8005fb8:	3754      	adds	r7, #84	@ 0x54
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff fecf 	bl	8005d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b21      	cmp	r3, #33	@ 0x21
 8005ffc:	d13e      	bne.n	800607c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006006:	d114      	bne.n	8006032 <UART_Transmit_IT+0x48>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d110      	bne.n	8006032 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006024:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	1c9a      	adds	r2, r3, #2
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	621a      	str	r2, [r3, #32]
 8006030:	e008      	b.n	8006044 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	1c59      	adds	r1, r3, #1
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6211      	str	r1, [r2, #32]
 800603c:	781a      	ldrb	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29b      	uxth	r3, r3
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	4619      	mov	r1, r3
 8006052:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10f      	bne.n	8006078 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006066:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006076:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	e000      	b.n	800607e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800607c:	2302      	movs	r3, #2
  }
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fe5e 	bl	8005d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b08c      	sub	sp, #48	@ 0x30
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b22      	cmp	r3, #34	@ 0x22
 80060cc:	f040 80ab 	bne.w	8006226 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d8:	d117      	bne.n	800610a <UART_Receive_IT+0x50>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d113      	bne.n	800610a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006102:	1c9a      	adds	r2, r3, #2
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	629a      	str	r2, [r3, #40]	@ 0x28
 8006108:	e026      	b.n	8006158 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006110:	2300      	movs	r3, #0
 8006112:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800611c:	d007      	beq.n	800612e <UART_Receive_IT+0x74>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <UART_Receive_IT+0x82>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e008      	b.n	800614e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006148:	b2da      	uxtb	r2, r3
 800614a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29b      	uxth	r3, r3
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	4619      	mov	r1, r3
 8006166:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006168:	2b00      	cmp	r3, #0
 800616a:	d15a      	bne.n	8006222 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0220 	bic.w	r2, r2, #32
 800617a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800618a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d135      	bne.n	8006218 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	613b      	str	r3, [r7, #16]
   return(result);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f023 0310 	bic.w	r3, r3, #16
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	330c      	adds	r3, #12
 80061d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d2:	623a      	str	r2, [r7, #32]
 80061d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	69f9      	ldr	r1, [r7, #28]
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	61bb      	str	r3, [r7, #24]
   return(result);
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e5      	bne.n	80061b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d10a      	bne.n	800620a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fdbf 	bl	8005d94 <HAL_UARTEx_RxEventCallback>
 8006216:	e002      	b.n	800621e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7fb fc95 	bl	8001b48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	e002      	b.n	8006228 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	e000      	b.n	8006228 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006226:	2302      	movs	r3, #2
  }
}
 8006228:	4618      	mov	r0, r3
 800622a:	3730      	adds	r7, #48	@ 0x30
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006234:	b0c0      	sub	sp, #256	@ 0x100
 8006236:	af00      	add	r7, sp, #0
 8006238:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624c:	68d9      	ldr	r1, [r3, #12]
 800624e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	ea40 0301 	orr.w	r3, r0, r1
 8006258:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800625a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	431a      	orrs	r2, r3
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	431a      	orrs	r2, r3
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006288:	f021 010c 	bic.w	r1, r1, #12
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006296:	430b      	orrs	r3, r1
 8006298:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800629a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062aa:	6999      	ldr	r1, [r3, #24]
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	ea40 0301 	orr.w	r3, r0, r1
 80062b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	4b8f      	ldr	r3, [pc, #572]	@ (80064fc <UART_SetConfig+0x2cc>)
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d005      	beq.n	80062d0 <UART_SetConfig+0xa0>
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006500 <UART_SetConfig+0x2d0>)
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d104      	bne.n	80062da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062d0:	f7fd ff10 	bl	80040f4 <HAL_RCC_GetPCLK2Freq>
 80062d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062d8:	e003      	b.n	80062e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062da:	f7fd fef7 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 80062de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ec:	f040 810c 	bne.w	8006508 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80062fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006302:	4622      	mov	r2, r4
 8006304:	462b      	mov	r3, r5
 8006306:	1891      	adds	r1, r2, r2
 8006308:	65b9      	str	r1, [r7, #88]	@ 0x58
 800630a:	415b      	adcs	r3, r3
 800630c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800630e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006312:	4621      	mov	r1, r4
 8006314:	eb12 0801 	adds.w	r8, r2, r1
 8006318:	4629      	mov	r1, r5
 800631a:	eb43 0901 	adc.w	r9, r3, r1
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800632a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800632e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006332:	4690      	mov	r8, r2
 8006334:	4699      	mov	r9, r3
 8006336:	4623      	mov	r3, r4
 8006338:	eb18 0303 	adds.w	r3, r8, r3
 800633c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006340:	462b      	mov	r3, r5
 8006342:	eb49 0303 	adc.w	r3, r9, r3
 8006346:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800634a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006356:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800635a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800635e:	460b      	mov	r3, r1
 8006360:	18db      	adds	r3, r3, r3
 8006362:	653b      	str	r3, [r7, #80]	@ 0x50
 8006364:	4613      	mov	r3, r2
 8006366:	eb42 0303 	adc.w	r3, r2, r3
 800636a:	657b      	str	r3, [r7, #84]	@ 0x54
 800636c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006370:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006374:	f7f9 ff84 	bl	8000280 <__aeabi_uldivmod>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4b61      	ldr	r3, [pc, #388]	@ (8006504 <UART_SetConfig+0x2d4>)
 800637e:	fba3 2302 	umull	r2, r3, r3, r2
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	011c      	lsls	r4, r3, #4
 8006386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800638a:	2200      	movs	r2, #0
 800638c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006390:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006394:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006398:	4642      	mov	r2, r8
 800639a:	464b      	mov	r3, r9
 800639c:	1891      	adds	r1, r2, r2
 800639e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80063a0:	415b      	adcs	r3, r3
 80063a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80063a8:	4641      	mov	r1, r8
 80063aa:	eb12 0a01 	adds.w	sl, r2, r1
 80063ae:	4649      	mov	r1, r9
 80063b0:	eb43 0b01 	adc.w	fp, r3, r1
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063c8:	4692      	mov	sl, r2
 80063ca:	469b      	mov	fp, r3
 80063cc:	4643      	mov	r3, r8
 80063ce:	eb1a 0303 	adds.w	r3, sl, r3
 80063d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063d6:	464b      	mov	r3, r9
 80063d8:	eb4b 0303 	adc.w	r3, fp, r3
 80063dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063f4:	460b      	mov	r3, r1
 80063f6:	18db      	adds	r3, r3, r3
 80063f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063fa:	4613      	mov	r3, r2
 80063fc:	eb42 0303 	adc.w	r3, r2, r3
 8006400:	647b      	str	r3, [r7, #68]	@ 0x44
 8006402:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006406:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800640a:	f7f9 ff39 	bl	8000280 <__aeabi_uldivmod>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4611      	mov	r1, r2
 8006414:	4b3b      	ldr	r3, [pc, #236]	@ (8006504 <UART_SetConfig+0x2d4>)
 8006416:	fba3 2301 	umull	r2, r3, r3, r1
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	2264      	movs	r2, #100	@ 0x64
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	1acb      	subs	r3, r1, r3
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800642a:	4b36      	ldr	r3, [pc, #216]	@ (8006504 <UART_SetConfig+0x2d4>)
 800642c:	fba3 2302 	umull	r2, r3, r3, r2
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006438:	441c      	add	r4, r3
 800643a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800643e:	2200      	movs	r2, #0
 8006440:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006444:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006448:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800644c:	4642      	mov	r2, r8
 800644e:	464b      	mov	r3, r9
 8006450:	1891      	adds	r1, r2, r2
 8006452:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006454:	415b      	adcs	r3, r3
 8006456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800645c:	4641      	mov	r1, r8
 800645e:	1851      	adds	r1, r2, r1
 8006460:	6339      	str	r1, [r7, #48]	@ 0x30
 8006462:	4649      	mov	r1, r9
 8006464:	414b      	adcs	r3, r1
 8006466:	637b      	str	r3, [r7, #52]	@ 0x34
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006474:	4659      	mov	r1, fp
 8006476:	00cb      	lsls	r3, r1, #3
 8006478:	4651      	mov	r1, sl
 800647a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647e:	4651      	mov	r1, sl
 8006480:	00ca      	lsls	r2, r1, #3
 8006482:	4610      	mov	r0, r2
 8006484:	4619      	mov	r1, r3
 8006486:	4603      	mov	r3, r0
 8006488:	4642      	mov	r2, r8
 800648a:	189b      	adds	r3, r3, r2
 800648c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006490:	464b      	mov	r3, r9
 8006492:	460a      	mov	r2, r1
 8006494:	eb42 0303 	adc.w	r3, r2, r3
 8006498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064b0:	460b      	mov	r3, r1
 80064b2:	18db      	adds	r3, r3, r3
 80064b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064b6:	4613      	mov	r3, r2
 80064b8:	eb42 0303 	adc.w	r3, r2, r3
 80064bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064c6:	f7f9 fedb 	bl	8000280 <__aeabi_uldivmod>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <UART_SetConfig+0x2d4>)
 80064d0:	fba3 1302 	umull	r1, r3, r3, r2
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	2164      	movs	r1, #100	@ 0x64
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	3332      	adds	r3, #50	@ 0x32
 80064e2:	4a08      	ldr	r2, [pc, #32]	@ (8006504 <UART_SetConfig+0x2d4>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	095b      	lsrs	r3, r3, #5
 80064ea:	f003 0207 	and.w	r2, r3, #7
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4422      	add	r2, r4
 80064f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064f8:	e106      	b.n	8006708 <UART_SetConfig+0x4d8>
 80064fa:	bf00      	nop
 80064fc:	40011000 	.word	0x40011000
 8006500:	40011400 	.word	0x40011400
 8006504:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800650c:	2200      	movs	r2, #0
 800650e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006512:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006516:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800651a:	4642      	mov	r2, r8
 800651c:	464b      	mov	r3, r9
 800651e:	1891      	adds	r1, r2, r2
 8006520:	6239      	str	r1, [r7, #32]
 8006522:	415b      	adcs	r3, r3
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
 8006526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800652a:	4641      	mov	r1, r8
 800652c:	1854      	adds	r4, r2, r1
 800652e:	4649      	mov	r1, r9
 8006530:	eb43 0501 	adc.w	r5, r3, r1
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	00eb      	lsls	r3, r5, #3
 800653e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006542:	00e2      	lsls	r2, r4, #3
 8006544:	4614      	mov	r4, r2
 8006546:	461d      	mov	r5, r3
 8006548:	4643      	mov	r3, r8
 800654a:	18e3      	adds	r3, r4, r3
 800654c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006550:	464b      	mov	r3, r9
 8006552:	eb45 0303 	adc.w	r3, r5, r3
 8006556:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800655a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006566:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800656a:	f04f 0200 	mov.w	r2, #0
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006576:	4629      	mov	r1, r5
 8006578:	008b      	lsls	r3, r1, #2
 800657a:	4621      	mov	r1, r4
 800657c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006580:	4621      	mov	r1, r4
 8006582:	008a      	lsls	r2, r1, #2
 8006584:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006588:	f7f9 fe7a 	bl	8000280 <__aeabi_uldivmod>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4b60      	ldr	r3, [pc, #384]	@ (8006714 <UART_SetConfig+0x4e4>)
 8006592:	fba3 2302 	umull	r2, r3, r3, r2
 8006596:	095b      	lsrs	r3, r3, #5
 8006598:	011c      	lsls	r4, r3, #4
 800659a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80065a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065ac:	4642      	mov	r2, r8
 80065ae:	464b      	mov	r3, r9
 80065b0:	1891      	adds	r1, r2, r2
 80065b2:	61b9      	str	r1, [r7, #24]
 80065b4:	415b      	adcs	r3, r3
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065bc:	4641      	mov	r1, r8
 80065be:	1851      	adds	r1, r2, r1
 80065c0:	6139      	str	r1, [r7, #16]
 80065c2:	4649      	mov	r1, r9
 80065c4:	414b      	adcs	r3, r1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	f04f 0300 	mov.w	r3, #0
 80065d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065d4:	4659      	mov	r1, fp
 80065d6:	00cb      	lsls	r3, r1, #3
 80065d8:	4651      	mov	r1, sl
 80065da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065de:	4651      	mov	r1, sl
 80065e0:	00ca      	lsls	r2, r1, #3
 80065e2:	4610      	mov	r0, r2
 80065e4:	4619      	mov	r1, r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	4642      	mov	r2, r8
 80065ea:	189b      	adds	r3, r3, r2
 80065ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065f0:	464b      	mov	r3, r9
 80065f2:	460a      	mov	r2, r1
 80065f4:	eb42 0303 	adc.w	r3, r2, r3
 80065f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006606:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006614:	4649      	mov	r1, r9
 8006616:	008b      	lsls	r3, r1, #2
 8006618:	4641      	mov	r1, r8
 800661a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800661e:	4641      	mov	r1, r8
 8006620:	008a      	lsls	r2, r1, #2
 8006622:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006626:	f7f9 fe2b 	bl	8000280 <__aeabi_uldivmod>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4611      	mov	r1, r2
 8006630:	4b38      	ldr	r3, [pc, #224]	@ (8006714 <UART_SetConfig+0x4e4>)
 8006632:	fba3 2301 	umull	r2, r3, r3, r1
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	2264      	movs	r2, #100	@ 0x64
 800663a:	fb02 f303 	mul.w	r3, r2, r3
 800663e:	1acb      	subs	r3, r1, r3
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	3332      	adds	r3, #50	@ 0x32
 8006644:	4a33      	ldr	r2, [pc, #204]	@ (8006714 <UART_SetConfig+0x4e4>)
 8006646:	fba2 2303 	umull	r2, r3, r2, r3
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006650:	441c      	add	r4, r3
 8006652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006656:	2200      	movs	r2, #0
 8006658:	673b      	str	r3, [r7, #112]	@ 0x70
 800665a:	677a      	str	r2, [r7, #116]	@ 0x74
 800665c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	1891      	adds	r1, r2, r2
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	415b      	adcs	r3, r3
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006670:	4641      	mov	r1, r8
 8006672:	1851      	adds	r1, r2, r1
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	4649      	mov	r1, r9
 8006678:	414b      	adcs	r3, r1
 800667a:	607b      	str	r3, [r7, #4]
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006688:	4659      	mov	r1, fp
 800668a:	00cb      	lsls	r3, r1, #3
 800668c:	4651      	mov	r1, sl
 800668e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006692:	4651      	mov	r1, sl
 8006694:	00ca      	lsls	r2, r1, #3
 8006696:	4610      	mov	r0, r2
 8006698:	4619      	mov	r1, r3
 800669a:	4603      	mov	r3, r0
 800669c:	4642      	mov	r2, r8
 800669e:	189b      	adds	r3, r3, r2
 80066a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066a2:	464b      	mov	r3, r9
 80066a4:	460a      	mov	r2, r1
 80066a6:	eb42 0303 	adc.w	r3, r2, r3
 80066aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80066b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066c4:	4649      	mov	r1, r9
 80066c6:	008b      	lsls	r3, r1, #2
 80066c8:	4641      	mov	r1, r8
 80066ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ce:	4641      	mov	r1, r8
 80066d0:	008a      	lsls	r2, r1, #2
 80066d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066d6:	f7f9 fdd3 	bl	8000280 <__aeabi_uldivmod>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <UART_SetConfig+0x4e4>)
 80066e0:	fba3 1302 	umull	r1, r3, r3, r2
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	2164      	movs	r1, #100	@ 0x64
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	3332      	adds	r3, #50	@ 0x32
 80066f2:	4a08      	ldr	r2, [pc, #32]	@ (8006714 <UART_SetConfig+0x4e4>)
 80066f4:	fba2 2303 	umull	r2, r3, r2, r3
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	f003 020f 	and.w	r2, r3, #15
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4422      	add	r2, r4
 8006706:	609a      	str	r2, [r3, #8]
}
 8006708:	bf00      	nop
 800670a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800670e:	46bd      	mov	sp, r7
 8006710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006714:	51eb851f 	.word	0x51eb851f

08006718 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006730:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4b20      	ldr	r3, [pc, #128]	@ (80067b8 <FSMC_NORSRAM_Init+0xa0>)
 8006736:	4013      	ands	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006742:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006748:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800674e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006754:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800675a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006760:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006766:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 800676c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8006772:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8006778:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 800677e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8006784:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d103      	bne.n	800679c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800679a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	fff00080 	.word	0xfff00080

080067bc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80067de:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80067ea:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80067f2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80067fa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	3b01      	subs	r3, #1
 8006802:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006804:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	3b02      	subs	r3, #2
 800680c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800680e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006814:	4313      	orrs	r3, r2
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6979      	ldr	r1, [r7, #20]
 8006824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006850:	d122      	bne.n	8006898 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4b15      	ldr	r3, [pc, #84]	@ (80068b4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006860:	4013      	ands	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800686e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006876:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800687e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006884:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6979      	ldr	r1, [r7, #20]
 8006892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006896:	e005      	b.n	80068a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80068a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	cff00000 	.word	0xcff00000

080068b8 <sniprintf>:
 80068b8:	b40c      	push	{r2, r3}
 80068ba:	b530      	push	{r4, r5, lr}
 80068bc:	4b17      	ldr	r3, [pc, #92]	@ (800691c <sniprintf+0x64>)
 80068be:	1e0c      	subs	r4, r1, #0
 80068c0:	681d      	ldr	r5, [r3, #0]
 80068c2:	b09d      	sub	sp, #116	@ 0x74
 80068c4:	da08      	bge.n	80068d8 <sniprintf+0x20>
 80068c6:	238b      	movs	r3, #139	@ 0x8b
 80068c8:	602b      	str	r3, [r5, #0]
 80068ca:	f04f 30ff 	mov.w	r0, #4294967295
 80068ce:	b01d      	add	sp, #116	@ 0x74
 80068d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068d4:	b002      	add	sp, #8
 80068d6:	4770      	bx	lr
 80068d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80068dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80068e0:	bf14      	ite	ne
 80068e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80068e6:	4623      	moveq	r3, r4
 80068e8:	9304      	str	r3, [sp, #16]
 80068ea:	9307      	str	r3, [sp, #28]
 80068ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068f0:	9002      	str	r0, [sp, #8]
 80068f2:	9006      	str	r0, [sp, #24]
 80068f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068fa:	ab21      	add	r3, sp, #132	@ 0x84
 80068fc:	a902      	add	r1, sp, #8
 80068fe:	4628      	mov	r0, r5
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	f000 f9cf 	bl	8006ca4 <_svfiprintf_r>
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	bfbc      	itt	lt
 800690a:	238b      	movlt	r3, #139	@ 0x8b
 800690c:	602b      	strlt	r3, [r5, #0]
 800690e:	2c00      	cmp	r4, #0
 8006910:	d0dd      	beq.n	80068ce <sniprintf+0x16>
 8006912:	9b02      	ldr	r3, [sp, #8]
 8006914:	2200      	movs	r2, #0
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	e7d9      	b.n	80068ce <sniprintf+0x16>
 800691a:	bf00      	nop
 800691c:	20000014 	.word	0x20000014

08006920 <memset>:
 8006920:	4402      	add	r2, r0
 8006922:	4603      	mov	r3, r0
 8006924:	4293      	cmp	r3, r2
 8006926:	d100      	bne.n	800692a <memset+0xa>
 8006928:	4770      	bx	lr
 800692a:	f803 1b01 	strb.w	r1, [r3], #1
 800692e:	e7f9      	b.n	8006924 <memset+0x4>

08006930 <strcat>:
 8006930:	b510      	push	{r4, lr}
 8006932:	4602      	mov	r2, r0
 8006934:	7814      	ldrb	r4, [r2, #0]
 8006936:	4613      	mov	r3, r2
 8006938:	3201      	adds	r2, #1
 800693a:	2c00      	cmp	r4, #0
 800693c:	d1fa      	bne.n	8006934 <strcat+0x4>
 800693e:	3b01      	subs	r3, #1
 8006940:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006944:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006948:	2a00      	cmp	r2, #0
 800694a:	d1f9      	bne.n	8006940 <strcat+0x10>
 800694c:	bd10      	pop	{r4, pc}
	...

08006950 <strdup>:
 8006950:	4b02      	ldr	r3, [pc, #8]	@ (800695c <strdup+0xc>)
 8006952:	4601      	mov	r1, r0
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f000 b803 	b.w	8006960 <_strdup_r>
 800695a:	bf00      	nop
 800695c:	20000014 	.word	0x20000014

08006960 <_strdup_r>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	460d      	mov	r5, r1
 8006968:	f7f9 fc32 	bl	80001d0 <strlen>
 800696c:	1c46      	adds	r6, r0, #1
 800696e:	4631      	mov	r1, r6
 8006970:	4620      	mov	r0, r4
 8006972:	f000 f8af 	bl	8006ad4 <_malloc_r>
 8006976:	4604      	mov	r4, r0
 8006978:	b118      	cbz	r0, 8006982 <_strdup_r+0x22>
 800697a:	4632      	mov	r2, r6
 800697c:	4629      	mov	r1, r5
 800697e:	f000 f82f 	bl	80069e0 <memcpy>
 8006982:	4620      	mov	r0, r4
 8006984:	bd70      	pop	{r4, r5, r6, pc}
	...

08006988 <__errno>:
 8006988:	4b01      	ldr	r3, [pc, #4]	@ (8006990 <__errno+0x8>)
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20000014 	.word	0x20000014

08006994 <__libc_init_array>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4d0d      	ldr	r5, [pc, #52]	@ (80069cc <__libc_init_array+0x38>)
 8006998:	4c0d      	ldr	r4, [pc, #52]	@ (80069d0 <__libc_init_array+0x3c>)
 800699a:	1b64      	subs	r4, r4, r5
 800699c:	10a4      	asrs	r4, r4, #2
 800699e:	2600      	movs	r6, #0
 80069a0:	42a6      	cmp	r6, r4
 80069a2:	d109      	bne.n	80069b8 <__libc_init_array+0x24>
 80069a4:	4d0b      	ldr	r5, [pc, #44]	@ (80069d4 <__libc_init_array+0x40>)
 80069a6:	4c0c      	ldr	r4, [pc, #48]	@ (80069d8 <__libc_init_array+0x44>)
 80069a8:	f000 fc66 	bl	8007278 <_init>
 80069ac:	1b64      	subs	r4, r4, r5
 80069ae:	10a4      	asrs	r4, r4, #2
 80069b0:	2600      	movs	r6, #0
 80069b2:	42a6      	cmp	r6, r4
 80069b4:	d105      	bne.n	80069c2 <__libc_init_array+0x2e>
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069bc:	4798      	blx	r3
 80069be:	3601      	adds	r6, #1
 80069c0:	e7ee      	b.n	80069a0 <__libc_init_array+0xc>
 80069c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c6:	4798      	blx	r3
 80069c8:	3601      	adds	r6, #1
 80069ca:	e7f2      	b.n	80069b2 <__libc_init_array+0x1e>
 80069cc:	08007308 	.word	0x08007308
 80069d0:	08007308 	.word	0x08007308
 80069d4:	08007308 	.word	0x08007308
 80069d8:	0800730c 	.word	0x0800730c

080069dc <__retarget_lock_acquire_recursive>:
 80069dc:	4770      	bx	lr

080069de <__retarget_lock_release_recursive>:
 80069de:	4770      	bx	lr

080069e0 <memcpy>:
 80069e0:	440a      	add	r2, r1
 80069e2:	4291      	cmp	r1, r2
 80069e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069e8:	d100      	bne.n	80069ec <memcpy+0xc>
 80069ea:	4770      	bx	lr
 80069ec:	b510      	push	{r4, lr}
 80069ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069f6:	4291      	cmp	r1, r2
 80069f8:	d1f9      	bne.n	80069ee <memcpy+0xe>
 80069fa:	bd10      	pop	{r4, pc}

080069fc <_free_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4605      	mov	r5, r0
 8006a00:	2900      	cmp	r1, #0
 8006a02:	d041      	beq.n	8006a88 <_free_r+0x8c>
 8006a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a08:	1f0c      	subs	r4, r1, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bfb8      	it	lt
 8006a0e:	18e4      	addlt	r4, r4, r3
 8006a10:	f000 f8e0 	bl	8006bd4 <__malloc_lock>
 8006a14:	4a1d      	ldr	r2, [pc, #116]	@ (8006a8c <_free_r+0x90>)
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	b933      	cbnz	r3, 8006a28 <_free_r+0x2c>
 8006a1a:	6063      	str	r3, [r4, #4]
 8006a1c:	6014      	str	r4, [r2, #0]
 8006a1e:	4628      	mov	r0, r5
 8006a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a24:	f000 b8dc 	b.w	8006be0 <__malloc_unlock>
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	d908      	bls.n	8006a3e <_free_r+0x42>
 8006a2c:	6820      	ldr	r0, [r4, #0]
 8006a2e:	1821      	adds	r1, r4, r0
 8006a30:	428b      	cmp	r3, r1
 8006a32:	bf01      	itttt	eq
 8006a34:	6819      	ldreq	r1, [r3, #0]
 8006a36:	685b      	ldreq	r3, [r3, #4]
 8006a38:	1809      	addeq	r1, r1, r0
 8006a3a:	6021      	streq	r1, [r4, #0]
 8006a3c:	e7ed      	b.n	8006a1a <_free_r+0x1e>
 8006a3e:	461a      	mov	r2, r3
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b10b      	cbz	r3, 8006a48 <_free_r+0x4c>
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d9fa      	bls.n	8006a3e <_free_r+0x42>
 8006a48:	6811      	ldr	r1, [r2, #0]
 8006a4a:	1850      	adds	r0, r2, r1
 8006a4c:	42a0      	cmp	r0, r4
 8006a4e:	d10b      	bne.n	8006a68 <_free_r+0x6c>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	4401      	add	r1, r0
 8006a54:	1850      	adds	r0, r2, r1
 8006a56:	4283      	cmp	r3, r0
 8006a58:	6011      	str	r1, [r2, #0]
 8006a5a:	d1e0      	bne.n	8006a1e <_free_r+0x22>
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	6053      	str	r3, [r2, #4]
 8006a62:	4408      	add	r0, r1
 8006a64:	6010      	str	r0, [r2, #0]
 8006a66:	e7da      	b.n	8006a1e <_free_r+0x22>
 8006a68:	d902      	bls.n	8006a70 <_free_r+0x74>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	e7d6      	b.n	8006a1e <_free_r+0x22>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	1821      	adds	r1, r4, r0
 8006a74:	428b      	cmp	r3, r1
 8006a76:	bf04      	itt	eq
 8006a78:	6819      	ldreq	r1, [r3, #0]
 8006a7a:	685b      	ldreq	r3, [r3, #4]
 8006a7c:	6063      	str	r3, [r4, #4]
 8006a7e:	bf04      	itt	eq
 8006a80:	1809      	addeq	r1, r1, r0
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	6054      	str	r4, [r2, #4]
 8006a86:	e7ca      	b.n	8006a1e <_free_r+0x22>
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000500 	.word	0x20000500

08006a90 <sbrk_aligned>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4e0f      	ldr	r6, [pc, #60]	@ (8006ad0 <sbrk_aligned+0x40>)
 8006a94:	460c      	mov	r4, r1
 8006a96:	6831      	ldr	r1, [r6, #0]
 8006a98:	4605      	mov	r5, r0
 8006a9a:	b911      	cbnz	r1, 8006aa2 <sbrk_aligned+0x12>
 8006a9c:	f000 fba6 	bl	80071ec <_sbrk_r>
 8006aa0:	6030      	str	r0, [r6, #0]
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 fba1 	bl	80071ec <_sbrk_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	d103      	bne.n	8006ab6 <sbrk_aligned+0x26>
 8006aae:	f04f 34ff 	mov.w	r4, #4294967295
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	bd70      	pop	{r4, r5, r6, pc}
 8006ab6:	1cc4      	adds	r4, r0, #3
 8006ab8:	f024 0403 	bic.w	r4, r4, #3
 8006abc:	42a0      	cmp	r0, r4
 8006abe:	d0f8      	beq.n	8006ab2 <sbrk_aligned+0x22>
 8006ac0:	1a21      	subs	r1, r4, r0
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f000 fb92 	bl	80071ec <_sbrk_r>
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d1f2      	bne.n	8006ab2 <sbrk_aligned+0x22>
 8006acc:	e7ef      	b.n	8006aae <sbrk_aligned+0x1e>
 8006ace:	bf00      	nop
 8006ad0:	200004fc 	.word	0x200004fc

08006ad4 <_malloc_r>:
 8006ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad8:	1ccd      	adds	r5, r1, #3
 8006ada:	f025 0503 	bic.w	r5, r5, #3
 8006ade:	3508      	adds	r5, #8
 8006ae0:	2d0c      	cmp	r5, #12
 8006ae2:	bf38      	it	cc
 8006ae4:	250c      	movcc	r5, #12
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	4606      	mov	r6, r0
 8006aea:	db01      	blt.n	8006af0 <_malloc_r+0x1c>
 8006aec:	42a9      	cmp	r1, r5
 8006aee:	d904      	bls.n	8006afa <_malloc_r+0x26>
 8006af0:	230c      	movs	r3, #12
 8006af2:	6033      	str	r3, [r6, #0]
 8006af4:	2000      	movs	r0, #0
 8006af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006afa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bd0 <_malloc_r+0xfc>
 8006afe:	f000 f869 	bl	8006bd4 <__malloc_lock>
 8006b02:	f8d8 3000 	ldr.w	r3, [r8]
 8006b06:	461c      	mov	r4, r3
 8006b08:	bb44      	cbnz	r4, 8006b5c <_malloc_r+0x88>
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f7ff ffbf 	bl	8006a90 <sbrk_aligned>
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	4604      	mov	r4, r0
 8006b16:	d158      	bne.n	8006bca <_malloc_r+0xf6>
 8006b18:	f8d8 4000 	ldr.w	r4, [r8]
 8006b1c:	4627      	mov	r7, r4
 8006b1e:	2f00      	cmp	r7, #0
 8006b20:	d143      	bne.n	8006baa <_malloc_r+0xd6>
 8006b22:	2c00      	cmp	r4, #0
 8006b24:	d04b      	beq.n	8006bbe <_malloc_r+0xea>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	4639      	mov	r1, r7
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	eb04 0903 	add.w	r9, r4, r3
 8006b30:	f000 fb5c 	bl	80071ec <_sbrk_r>
 8006b34:	4581      	cmp	r9, r0
 8006b36:	d142      	bne.n	8006bbe <_malloc_r+0xea>
 8006b38:	6821      	ldr	r1, [r4, #0]
 8006b3a:	1a6d      	subs	r5, r5, r1
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	4630      	mov	r0, r6
 8006b40:	f7ff ffa6 	bl	8006a90 <sbrk_aligned>
 8006b44:	3001      	adds	r0, #1
 8006b46:	d03a      	beq.n	8006bbe <_malloc_r+0xea>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	442b      	add	r3, r5
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	bb62      	cbnz	r2, 8006bb0 <_malloc_r+0xdc>
 8006b56:	f8c8 7000 	str.w	r7, [r8]
 8006b5a:	e00f      	b.n	8006b7c <_malloc_r+0xa8>
 8006b5c:	6822      	ldr	r2, [r4, #0]
 8006b5e:	1b52      	subs	r2, r2, r5
 8006b60:	d420      	bmi.n	8006ba4 <_malloc_r+0xd0>
 8006b62:	2a0b      	cmp	r2, #11
 8006b64:	d917      	bls.n	8006b96 <_malloc_r+0xc2>
 8006b66:	1961      	adds	r1, r4, r5
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	6025      	str	r5, [r4, #0]
 8006b6c:	bf18      	it	ne
 8006b6e:	6059      	strne	r1, [r3, #4]
 8006b70:	6863      	ldr	r3, [r4, #4]
 8006b72:	bf08      	it	eq
 8006b74:	f8c8 1000 	streq.w	r1, [r8]
 8006b78:	5162      	str	r2, [r4, r5]
 8006b7a:	604b      	str	r3, [r1, #4]
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f000 f82f 	bl	8006be0 <__malloc_unlock>
 8006b82:	f104 000b 	add.w	r0, r4, #11
 8006b86:	1d23      	adds	r3, r4, #4
 8006b88:	f020 0007 	bic.w	r0, r0, #7
 8006b8c:	1ac2      	subs	r2, r0, r3
 8006b8e:	bf1c      	itt	ne
 8006b90:	1a1b      	subne	r3, r3, r0
 8006b92:	50a3      	strne	r3, [r4, r2]
 8006b94:	e7af      	b.n	8006af6 <_malloc_r+0x22>
 8006b96:	6862      	ldr	r2, [r4, #4]
 8006b98:	42a3      	cmp	r3, r4
 8006b9a:	bf0c      	ite	eq
 8006b9c:	f8c8 2000 	streq.w	r2, [r8]
 8006ba0:	605a      	strne	r2, [r3, #4]
 8006ba2:	e7eb      	b.n	8006b7c <_malloc_r+0xa8>
 8006ba4:	4623      	mov	r3, r4
 8006ba6:	6864      	ldr	r4, [r4, #4]
 8006ba8:	e7ae      	b.n	8006b08 <_malloc_r+0x34>
 8006baa:	463c      	mov	r4, r7
 8006bac:	687f      	ldr	r7, [r7, #4]
 8006bae:	e7b6      	b.n	8006b1e <_malloc_r+0x4a>
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	42a3      	cmp	r3, r4
 8006bb6:	d1fb      	bne.n	8006bb0 <_malloc_r+0xdc>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	6053      	str	r3, [r2, #4]
 8006bbc:	e7de      	b.n	8006b7c <_malloc_r+0xa8>
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	6033      	str	r3, [r6, #0]
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f000 f80c 	bl	8006be0 <__malloc_unlock>
 8006bc8:	e794      	b.n	8006af4 <_malloc_r+0x20>
 8006bca:	6005      	str	r5, [r0, #0]
 8006bcc:	e7d6      	b.n	8006b7c <_malloc_r+0xa8>
 8006bce:	bf00      	nop
 8006bd0:	20000500 	.word	0x20000500

08006bd4 <__malloc_lock>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	@ (8006bdc <__malloc_lock+0x8>)
 8006bd6:	f7ff bf01 	b.w	80069dc <__retarget_lock_acquire_recursive>
 8006bda:	bf00      	nop
 8006bdc:	200004f8 	.word	0x200004f8

08006be0 <__malloc_unlock>:
 8006be0:	4801      	ldr	r0, [pc, #4]	@ (8006be8 <__malloc_unlock+0x8>)
 8006be2:	f7ff befc 	b.w	80069de <__retarget_lock_release_recursive>
 8006be6:	bf00      	nop
 8006be8:	200004f8 	.word	0x200004f8

08006bec <__ssputs_r>:
 8006bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf0:	688e      	ldr	r6, [r1, #8]
 8006bf2:	461f      	mov	r7, r3
 8006bf4:	42be      	cmp	r6, r7
 8006bf6:	680b      	ldr	r3, [r1, #0]
 8006bf8:	4682      	mov	sl, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	4690      	mov	r8, r2
 8006bfe:	d82d      	bhi.n	8006c5c <__ssputs_r+0x70>
 8006c00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c08:	d026      	beq.n	8006c58 <__ssputs_r+0x6c>
 8006c0a:	6965      	ldr	r5, [r4, #20]
 8006c0c:	6909      	ldr	r1, [r1, #16]
 8006c0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c12:	eba3 0901 	sub.w	r9, r3, r1
 8006c16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c1a:	1c7b      	adds	r3, r7, #1
 8006c1c:	444b      	add	r3, r9
 8006c1e:	106d      	asrs	r5, r5, #1
 8006c20:	429d      	cmp	r5, r3
 8006c22:	bf38      	it	cc
 8006c24:	461d      	movcc	r5, r3
 8006c26:	0553      	lsls	r3, r2, #21
 8006c28:	d527      	bpl.n	8006c7a <__ssputs_r+0x8e>
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f7ff ff52 	bl	8006ad4 <_malloc_r>
 8006c30:	4606      	mov	r6, r0
 8006c32:	b360      	cbz	r0, 8006c8e <__ssputs_r+0xa2>
 8006c34:	6921      	ldr	r1, [r4, #16]
 8006c36:	464a      	mov	r2, r9
 8006c38:	f7ff fed2 	bl	80069e0 <memcpy>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c46:	81a3      	strh	r3, [r4, #12]
 8006c48:	6126      	str	r6, [r4, #16]
 8006c4a:	6165      	str	r5, [r4, #20]
 8006c4c:	444e      	add	r6, r9
 8006c4e:	eba5 0509 	sub.w	r5, r5, r9
 8006c52:	6026      	str	r6, [r4, #0]
 8006c54:	60a5      	str	r5, [r4, #8]
 8006c56:	463e      	mov	r6, r7
 8006c58:	42be      	cmp	r6, r7
 8006c5a:	d900      	bls.n	8006c5e <__ssputs_r+0x72>
 8006c5c:	463e      	mov	r6, r7
 8006c5e:	6820      	ldr	r0, [r4, #0]
 8006c60:	4632      	mov	r2, r6
 8006c62:	4641      	mov	r1, r8
 8006c64:	f000 faa8 	bl	80071b8 <memmove>
 8006c68:	68a3      	ldr	r3, [r4, #8]
 8006c6a:	1b9b      	subs	r3, r3, r6
 8006c6c:	60a3      	str	r3, [r4, #8]
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	4433      	add	r3, r6
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	2000      	movs	r0, #0
 8006c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7a:	462a      	mov	r2, r5
 8006c7c:	f000 fac6 	bl	800720c <_realloc_r>
 8006c80:	4606      	mov	r6, r0
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d1e0      	bne.n	8006c48 <__ssputs_r+0x5c>
 8006c86:	6921      	ldr	r1, [r4, #16]
 8006c88:	4650      	mov	r0, sl
 8006c8a:	f7ff feb7 	bl	80069fc <_free_r>
 8006c8e:	230c      	movs	r3, #12
 8006c90:	f8ca 3000 	str.w	r3, [sl]
 8006c94:	89a3      	ldrh	r3, [r4, #12]
 8006c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c9a:	81a3      	strh	r3, [r4, #12]
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	e7e9      	b.n	8006c76 <__ssputs_r+0x8a>
	...

08006ca4 <_svfiprintf_r>:
 8006ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca8:	4698      	mov	r8, r3
 8006caa:	898b      	ldrh	r3, [r1, #12]
 8006cac:	061b      	lsls	r3, r3, #24
 8006cae:	b09d      	sub	sp, #116	@ 0x74
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	460d      	mov	r5, r1
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	d510      	bpl.n	8006cda <_svfiprintf_r+0x36>
 8006cb8:	690b      	ldr	r3, [r1, #16]
 8006cba:	b973      	cbnz	r3, 8006cda <_svfiprintf_r+0x36>
 8006cbc:	2140      	movs	r1, #64	@ 0x40
 8006cbe:	f7ff ff09 	bl	8006ad4 <_malloc_r>
 8006cc2:	6028      	str	r0, [r5, #0]
 8006cc4:	6128      	str	r0, [r5, #16]
 8006cc6:	b930      	cbnz	r0, 8006cd6 <_svfiprintf_r+0x32>
 8006cc8:	230c      	movs	r3, #12
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	b01d      	add	sp, #116	@ 0x74
 8006cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd6:	2340      	movs	r3, #64	@ 0x40
 8006cd8:	616b      	str	r3, [r5, #20]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cde:	2320      	movs	r3, #32
 8006ce0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ce8:	2330      	movs	r3, #48	@ 0x30
 8006cea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e88 <_svfiprintf_r+0x1e4>
 8006cee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cf2:	f04f 0901 	mov.w	r9, #1
 8006cf6:	4623      	mov	r3, r4
 8006cf8:	469a      	mov	sl, r3
 8006cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cfe:	b10a      	cbz	r2, 8006d04 <_svfiprintf_r+0x60>
 8006d00:	2a25      	cmp	r2, #37	@ 0x25
 8006d02:	d1f9      	bne.n	8006cf8 <_svfiprintf_r+0x54>
 8006d04:	ebba 0b04 	subs.w	fp, sl, r4
 8006d08:	d00b      	beq.n	8006d22 <_svfiprintf_r+0x7e>
 8006d0a:	465b      	mov	r3, fp
 8006d0c:	4622      	mov	r2, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	4638      	mov	r0, r7
 8006d12:	f7ff ff6b 	bl	8006bec <__ssputs_r>
 8006d16:	3001      	adds	r0, #1
 8006d18:	f000 80a7 	beq.w	8006e6a <_svfiprintf_r+0x1c6>
 8006d1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d1e:	445a      	add	r2, fp
 8006d20:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d22:	f89a 3000 	ldrb.w	r3, [sl]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 809f 	beq.w	8006e6a <_svfiprintf_r+0x1c6>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d36:	f10a 0a01 	add.w	sl, sl, #1
 8006d3a:	9304      	str	r3, [sp, #16]
 8006d3c:	9307      	str	r3, [sp, #28]
 8006d3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d42:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d44:	4654      	mov	r4, sl
 8006d46:	2205      	movs	r2, #5
 8006d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d4c:	484e      	ldr	r0, [pc, #312]	@ (8006e88 <_svfiprintf_r+0x1e4>)
 8006d4e:	f7f9 fa47 	bl	80001e0 <memchr>
 8006d52:	9a04      	ldr	r2, [sp, #16]
 8006d54:	b9d8      	cbnz	r0, 8006d8e <_svfiprintf_r+0xea>
 8006d56:	06d0      	lsls	r0, r2, #27
 8006d58:	bf44      	itt	mi
 8006d5a:	2320      	movmi	r3, #32
 8006d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d60:	0711      	lsls	r1, r2, #28
 8006d62:	bf44      	itt	mi
 8006d64:	232b      	movmi	r3, #43	@ 0x2b
 8006d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d70:	d015      	beq.n	8006d9e <_svfiprintf_r+0xfa>
 8006d72:	9a07      	ldr	r2, [sp, #28]
 8006d74:	4654      	mov	r4, sl
 8006d76:	2000      	movs	r0, #0
 8006d78:	f04f 0c0a 	mov.w	ip, #10
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d82:	3b30      	subs	r3, #48	@ 0x30
 8006d84:	2b09      	cmp	r3, #9
 8006d86:	d94b      	bls.n	8006e20 <_svfiprintf_r+0x17c>
 8006d88:	b1b0      	cbz	r0, 8006db8 <_svfiprintf_r+0x114>
 8006d8a:	9207      	str	r2, [sp, #28]
 8006d8c:	e014      	b.n	8006db8 <_svfiprintf_r+0x114>
 8006d8e:	eba0 0308 	sub.w	r3, r0, r8
 8006d92:	fa09 f303 	lsl.w	r3, r9, r3
 8006d96:	4313      	orrs	r3, r2
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	46a2      	mov	sl, r4
 8006d9c:	e7d2      	b.n	8006d44 <_svfiprintf_r+0xa0>
 8006d9e:	9b03      	ldr	r3, [sp, #12]
 8006da0:	1d19      	adds	r1, r3, #4
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	9103      	str	r1, [sp, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	bfbb      	ittet	lt
 8006daa:	425b      	neglt	r3, r3
 8006dac:	f042 0202 	orrlt.w	r2, r2, #2
 8006db0:	9307      	strge	r3, [sp, #28]
 8006db2:	9307      	strlt	r3, [sp, #28]
 8006db4:	bfb8      	it	lt
 8006db6:	9204      	strlt	r2, [sp, #16]
 8006db8:	7823      	ldrb	r3, [r4, #0]
 8006dba:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dbc:	d10a      	bne.n	8006dd4 <_svfiprintf_r+0x130>
 8006dbe:	7863      	ldrb	r3, [r4, #1]
 8006dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dc2:	d132      	bne.n	8006e2a <_svfiprintf_r+0x186>
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	1d1a      	adds	r2, r3, #4
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	9203      	str	r2, [sp, #12]
 8006dcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dd0:	3402      	adds	r4, #2
 8006dd2:	9305      	str	r3, [sp, #20]
 8006dd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e98 <_svfiprintf_r+0x1f4>
 8006dd8:	7821      	ldrb	r1, [r4, #0]
 8006dda:	2203      	movs	r2, #3
 8006ddc:	4650      	mov	r0, sl
 8006dde:	f7f9 f9ff 	bl	80001e0 <memchr>
 8006de2:	b138      	cbz	r0, 8006df4 <_svfiprintf_r+0x150>
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	eba0 000a 	sub.w	r0, r0, sl
 8006dea:	2240      	movs	r2, #64	@ 0x40
 8006dec:	4082      	lsls	r2, r0
 8006dee:	4313      	orrs	r3, r2
 8006df0:	3401      	adds	r4, #1
 8006df2:	9304      	str	r3, [sp, #16]
 8006df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df8:	4824      	ldr	r0, [pc, #144]	@ (8006e8c <_svfiprintf_r+0x1e8>)
 8006dfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dfe:	2206      	movs	r2, #6
 8006e00:	f7f9 f9ee 	bl	80001e0 <memchr>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d036      	beq.n	8006e76 <_svfiprintf_r+0x1d2>
 8006e08:	4b21      	ldr	r3, [pc, #132]	@ (8006e90 <_svfiprintf_r+0x1ec>)
 8006e0a:	bb1b      	cbnz	r3, 8006e54 <_svfiprintf_r+0x1b0>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	3307      	adds	r3, #7
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	3308      	adds	r3, #8
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1a:	4433      	add	r3, r6
 8006e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e1e:	e76a      	b.n	8006cf6 <_svfiprintf_r+0x52>
 8006e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e24:	460c      	mov	r4, r1
 8006e26:	2001      	movs	r0, #1
 8006e28:	e7a8      	b.n	8006d7c <_svfiprintf_r+0xd8>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	3401      	adds	r4, #1
 8006e2e:	9305      	str	r3, [sp, #20]
 8006e30:	4619      	mov	r1, r3
 8006e32:	f04f 0c0a 	mov.w	ip, #10
 8006e36:	4620      	mov	r0, r4
 8006e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e3c:	3a30      	subs	r2, #48	@ 0x30
 8006e3e:	2a09      	cmp	r2, #9
 8006e40:	d903      	bls.n	8006e4a <_svfiprintf_r+0x1a6>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0c6      	beq.n	8006dd4 <_svfiprintf_r+0x130>
 8006e46:	9105      	str	r1, [sp, #20]
 8006e48:	e7c4      	b.n	8006dd4 <_svfiprintf_r+0x130>
 8006e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e4e:	4604      	mov	r4, r0
 8006e50:	2301      	movs	r3, #1
 8006e52:	e7f0      	b.n	8006e36 <_svfiprintf_r+0x192>
 8006e54:	ab03      	add	r3, sp, #12
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	462a      	mov	r2, r5
 8006e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e94 <_svfiprintf_r+0x1f0>)
 8006e5c:	a904      	add	r1, sp, #16
 8006e5e:	4638      	mov	r0, r7
 8006e60:	f3af 8000 	nop.w
 8006e64:	1c42      	adds	r2, r0, #1
 8006e66:	4606      	mov	r6, r0
 8006e68:	d1d6      	bne.n	8006e18 <_svfiprintf_r+0x174>
 8006e6a:	89ab      	ldrh	r3, [r5, #12]
 8006e6c:	065b      	lsls	r3, r3, #25
 8006e6e:	f53f af2d 	bmi.w	8006ccc <_svfiprintf_r+0x28>
 8006e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e74:	e72c      	b.n	8006cd0 <_svfiprintf_r+0x2c>
 8006e76:	ab03      	add	r3, sp, #12
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <_svfiprintf_r+0x1f0>)
 8006e7e:	a904      	add	r1, sp, #16
 8006e80:	4638      	mov	r0, r7
 8006e82:	f000 f879 	bl	8006f78 <_printf_i>
 8006e86:	e7ed      	b.n	8006e64 <_svfiprintf_r+0x1c0>
 8006e88:	080072cc 	.word	0x080072cc
 8006e8c:	080072d6 	.word	0x080072d6
 8006e90:	00000000 	.word	0x00000000
 8006e94:	08006bed 	.word	0x08006bed
 8006e98:	080072d2 	.word	0x080072d2

08006e9c <_printf_common>:
 8006e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	4698      	mov	r8, r3
 8006ea4:	688a      	ldr	r2, [r1, #8]
 8006ea6:	690b      	ldr	r3, [r1, #16]
 8006ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eac:	4293      	cmp	r3, r2
 8006eae:	bfb8      	it	lt
 8006eb0:	4613      	movlt	r3, r2
 8006eb2:	6033      	str	r3, [r6, #0]
 8006eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006eb8:	4607      	mov	r7, r0
 8006eba:	460c      	mov	r4, r1
 8006ebc:	b10a      	cbz	r2, 8006ec2 <_printf_common+0x26>
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	6033      	str	r3, [r6, #0]
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	0699      	lsls	r1, r3, #26
 8006ec6:	bf42      	ittt	mi
 8006ec8:	6833      	ldrmi	r3, [r6, #0]
 8006eca:	3302      	addmi	r3, #2
 8006ecc:	6033      	strmi	r3, [r6, #0]
 8006ece:	6825      	ldr	r5, [r4, #0]
 8006ed0:	f015 0506 	ands.w	r5, r5, #6
 8006ed4:	d106      	bne.n	8006ee4 <_printf_common+0x48>
 8006ed6:	f104 0a19 	add.w	sl, r4, #25
 8006eda:	68e3      	ldr	r3, [r4, #12]
 8006edc:	6832      	ldr	r2, [r6, #0]
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	dc26      	bgt.n	8006f32 <_printf_common+0x96>
 8006ee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ee8:	6822      	ldr	r2, [r4, #0]
 8006eea:	3b00      	subs	r3, #0
 8006eec:	bf18      	it	ne
 8006eee:	2301      	movne	r3, #1
 8006ef0:	0692      	lsls	r2, r2, #26
 8006ef2:	d42b      	bmi.n	8006f4c <_printf_common+0xb0>
 8006ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ef8:	4641      	mov	r1, r8
 8006efa:	4638      	mov	r0, r7
 8006efc:	47c8      	blx	r9
 8006efe:	3001      	adds	r0, #1
 8006f00:	d01e      	beq.n	8006f40 <_printf_common+0xa4>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	6922      	ldr	r2, [r4, #16]
 8006f06:	f003 0306 	and.w	r3, r3, #6
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	bf02      	ittt	eq
 8006f0e:	68e5      	ldreq	r5, [r4, #12]
 8006f10:	6833      	ldreq	r3, [r6, #0]
 8006f12:	1aed      	subeq	r5, r5, r3
 8006f14:	68a3      	ldr	r3, [r4, #8]
 8006f16:	bf0c      	ite	eq
 8006f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f1c:	2500      	movne	r5, #0
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	bfc4      	itt	gt
 8006f22:	1a9b      	subgt	r3, r3, r2
 8006f24:	18ed      	addgt	r5, r5, r3
 8006f26:	2600      	movs	r6, #0
 8006f28:	341a      	adds	r4, #26
 8006f2a:	42b5      	cmp	r5, r6
 8006f2c:	d11a      	bne.n	8006f64 <_printf_common+0xc8>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	e008      	b.n	8006f44 <_printf_common+0xa8>
 8006f32:	2301      	movs	r3, #1
 8006f34:	4652      	mov	r2, sl
 8006f36:	4641      	mov	r1, r8
 8006f38:	4638      	mov	r0, r7
 8006f3a:	47c8      	blx	r9
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d103      	bne.n	8006f48 <_printf_common+0xac>
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295
 8006f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f48:	3501      	adds	r5, #1
 8006f4a:	e7c6      	b.n	8006eda <_printf_common+0x3e>
 8006f4c:	18e1      	adds	r1, r4, r3
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	2030      	movs	r0, #48	@ 0x30
 8006f52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f56:	4422      	add	r2, r4
 8006f58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f60:	3302      	adds	r3, #2
 8006f62:	e7c7      	b.n	8006ef4 <_printf_common+0x58>
 8006f64:	2301      	movs	r3, #1
 8006f66:	4622      	mov	r2, r4
 8006f68:	4641      	mov	r1, r8
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	47c8      	blx	r9
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d0e6      	beq.n	8006f40 <_printf_common+0xa4>
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7d9      	b.n	8006f2a <_printf_common+0x8e>
	...

08006f78 <_printf_i>:
 8006f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f7c:	7e0f      	ldrb	r7, [r1, #24]
 8006f7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f80:	2f78      	cmp	r7, #120	@ 0x78
 8006f82:	4691      	mov	r9, r2
 8006f84:	4680      	mov	r8, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	469a      	mov	sl, r3
 8006f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f8e:	d807      	bhi.n	8006fa0 <_printf_i+0x28>
 8006f90:	2f62      	cmp	r7, #98	@ 0x62
 8006f92:	d80a      	bhi.n	8006faa <_printf_i+0x32>
 8006f94:	2f00      	cmp	r7, #0
 8006f96:	f000 80d2 	beq.w	800713e <_printf_i+0x1c6>
 8006f9a:	2f58      	cmp	r7, #88	@ 0x58
 8006f9c:	f000 80b9 	beq.w	8007112 <_printf_i+0x19a>
 8006fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fa8:	e03a      	b.n	8007020 <_printf_i+0xa8>
 8006faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fae:	2b15      	cmp	r3, #21
 8006fb0:	d8f6      	bhi.n	8006fa0 <_printf_i+0x28>
 8006fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8006fb8 <_printf_i+0x40>)
 8006fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fb8:	08007011 	.word	0x08007011
 8006fbc:	08007025 	.word	0x08007025
 8006fc0:	08006fa1 	.word	0x08006fa1
 8006fc4:	08006fa1 	.word	0x08006fa1
 8006fc8:	08006fa1 	.word	0x08006fa1
 8006fcc:	08006fa1 	.word	0x08006fa1
 8006fd0:	08007025 	.word	0x08007025
 8006fd4:	08006fa1 	.word	0x08006fa1
 8006fd8:	08006fa1 	.word	0x08006fa1
 8006fdc:	08006fa1 	.word	0x08006fa1
 8006fe0:	08006fa1 	.word	0x08006fa1
 8006fe4:	08007125 	.word	0x08007125
 8006fe8:	0800704f 	.word	0x0800704f
 8006fec:	080070df 	.word	0x080070df
 8006ff0:	08006fa1 	.word	0x08006fa1
 8006ff4:	08006fa1 	.word	0x08006fa1
 8006ff8:	08007147 	.word	0x08007147
 8006ffc:	08006fa1 	.word	0x08006fa1
 8007000:	0800704f 	.word	0x0800704f
 8007004:	08006fa1 	.word	0x08006fa1
 8007008:	08006fa1 	.word	0x08006fa1
 800700c:	080070e7 	.word	0x080070e7
 8007010:	6833      	ldr	r3, [r6, #0]
 8007012:	1d1a      	adds	r2, r3, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6032      	str	r2, [r6, #0]
 8007018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800701c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007020:	2301      	movs	r3, #1
 8007022:	e09d      	b.n	8007160 <_printf_i+0x1e8>
 8007024:	6833      	ldr	r3, [r6, #0]
 8007026:	6820      	ldr	r0, [r4, #0]
 8007028:	1d19      	adds	r1, r3, #4
 800702a:	6031      	str	r1, [r6, #0]
 800702c:	0606      	lsls	r6, r0, #24
 800702e:	d501      	bpl.n	8007034 <_printf_i+0xbc>
 8007030:	681d      	ldr	r5, [r3, #0]
 8007032:	e003      	b.n	800703c <_printf_i+0xc4>
 8007034:	0645      	lsls	r5, r0, #25
 8007036:	d5fb      	bpl.n	8007030 <_printf_i+0xb8>
 8007038:	f9b3 5000 	ldrsh.w	r5, [r3]
 800703c:	2d00      	cmp	r5, #0
 800703e:	da03      	bge.n	8007048 <_printf_i+0xd0>
 8007040:	232d      	movs	r3, #45	@ 0x2d
 8007042:	426d      	negs	r5, r5
 8007044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007048:	4859      	ldr	r0, [pc, #356]	@ (80071b0 <_printf_i+0x238>)
 800704a:	230a      	movs	r3, #10
 800704c:	e011      	b.n	8007072 <_printf_i+0xfa>
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	6833      	ldr	r3, [r6, #0]
 8007052:	0608      	lsls	r0, r1, #24
 8007054:	f853 5b04 	ldr.w	r5, [r3], #4
 8007058:	d402      	bmi.n	8007060 <_printf_i+0xe8>
 800705a:	0649      	lsls	r1, r1, #25
 800705c:	bf48      	it	mi
 800705e:	b2ad      	uxthmi	r5, r5
 8007060:	2f6f      	cmp	r7, #111	@ 0x6f
 8007062:	4853      	ldr	r0, [pc, #332]	@ (80071b0 <_printf_i+0x238>)
 8007064:	6033      	str	r3, [r6, #0]
 8007066:	bf14      	ite	ne
 8007068:	230a      	movne	r3, #10
 800706a:	2308      	moveq	r3, #8
 800706c:	2100      	movs	r1, #0
 800706e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007072:	6866      	ldr	r6, [r4, #4]
 8007074:	60a6      	str	r6, [r4, #8]
 8007076:	2e00      	cmp	r6, #0
 8007078:	bfa2      	ittt	ge
 800707a:	6821      	ldrge	r1, [r4, #0]
 800707c:	f021 0104 	bicge.w	r1, r1, #4
 8007080:	6021      	strge	r1, [r4, #0]
 8007082:	b90d      	cbnz	r5, 8007088 <_printf_i+0x110>
 8007084:	2e00      	cmp	r6, #0
 8007086:	d04b      	beq.n	8007120 <_printf_i+0x1a8>
 8007088:	4616      	mov	r6, r2
 800708a:	fbb5 f1f3 	udiv	r1, r5, r3
 800708e:	fb03 5711 	mls	r7, r3, r1, r5
 8007092:	5dc7      	ldrb	r7, [r0, r7]
 8007094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007098:	462f      	mov	r7, r5
 800709a:	42bb      	cmp	r3, r7
 800709c:	460d      	mov	r5, r1
 800709e:	d9f4      	bls.n	800708a <_printf_i+0x112>
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d10b      	bne.n	80070bc <_printf_i+0x144>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	07df      	lsls	r7, r3, #31
 80070a8:	d508      	bpl.n	80070bc <_printf_i+0x144>
 80070aa:	6923      	ldr	r3, [r4, #16]
 80070ac:	6861      	ldr	r1, [r4, #4]
 80070ae:	4299      	cmp	r1, r3
 80070b0:	bfde      	ittt	le
 80070b2:	2330      	movle	r3, #48	@ 0x30
 80070b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070bc:	1b92      	subs	r2, r2, r6
 80070be:	6122      	str	r2, [r4, #16]
 80070c0:	f8cd a000 	str.w	sl, [sp]
 80070c4:	464b      	mov	r3, r9
 80070c6:	aa03      	add	r2, sp, #12
 80070c8:	4621      	mov	r1, r4
 80070ca:	4640      	mov	r0, r8
 80070cc:	f7ff fee6 	bl	8006e9c <_printf_common>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d14a      	bne.n	800716a <_printf_i+0x1f2>
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295
 80070d8:	b004      	add	sp, #16
 80070da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f043 0320 	orr.w	r3, r3, #32
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	4833      	ldr	r0, [pc, #204]	@ (80071b4 <_printf_i+0x23c>)
 80070e8:	2778      	movs	r7, #120	@ 0x78
 80070ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	6831      	ldr	r1, [r6, #0]
 80070f2:	061f      	lsls	r7, r3, #24
 80070f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80070f8:	d402      	bmi.n	8007100 <_printf_i+0x188>
 80070fa:	065f      	lsls	r7, r3, #25
 80070fc:	bf48      	it	mi
 80070fe:	b2ad      	uxthmi	r5, r5
 8007100:	6031      	str	r1, [r6, #0]
 8007102:	07d9      	lsls	r1, r3, #31
 8007104:	bf44      	itt	mi
 8007106:	f043 0320 	orrmi.w	r3, r3, #32
 800710a:	6023      	strmi	r3, [r4, #0]
 800710c:	b11d      	cbz	r5, 8007116 <_printf_i+0x19e>
 800710e:	2310      	movs	r3, #16
 8007110:	e7ac      	b.n	800706c <_printf_i+0xf4>
 8007112:	4827      	ldr	r0, [pc, #156]	@ (80071b0 <_printf_i+0x238>)
 8007114:	e7e9      	b.n	80070ea <_printf_i+0x172>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	f023 0320 	bic.w	r3, r3, #32
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	e7f6      	b.n	800710e <_printf_i+0x196>
 8007120:	4616      	mov	r6, r2
 8007122:	e7bd      	b.n	80070a0 <_printf_i+0x128>
 8007124:	6833      	ldr	r3, [r6, #0]
 8007126:	6825      	ldr	r5, [r4, #0]
 8007128:	6961      	ldr	r1, [r4, #20]
 800712a:	1d18      	adds	r0, r3, #4
 800712c:	6030      	str	r0, [r6, #0]
 800712e:	062e      	lsls	r6, r5, #24
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	d501      	bpl.n	8007138 <_printf_i+0x1c0>
 8007134:	6019      	str	r1, [r3, #0]
 8007136:	e002      	b.n	800713e <_printf_i+0x1c6>
 8007138:	0668      	lsls	r0, r5, #25
 800713a:	d5fb      	bpl.n	8007134 <_printf_i+0x1bc>
 800713c:	8019      	strh	r1, [r3, #0]
 800713e:	2300      	movs	r3, #0
 8007140:	6123      	str	r3, [r4, #16]
 8007142:	4616      	mov	r6, r2
 8007144:	e7bc      	b.n	80070c0 <_printf_i+0x148>
 8007146:	6833      	ldr	r3, [r6, #0]
 8007148:	1d1a      	adds	r2, r3, #4
 800714a:	6032      	str	r2, [r6, #0]
 800714c:	681e      	ldr	r6, [r3, #0]
 800714e:	6862      	ldr	r2, [r4, #4]
 8007150:	2100      	movs	r1, #0
 8007152:	4630      	mov	r0, r6
 8007154:	f7f9 f844 	bl	80001e0 <memchr>
 8007158:	b108      	cbz	r0, 800715e <_printf_i+0x1e6>
 800715a:	1b80      	subs	r0, r0, r6
 800715c:	6060      	str	r0, [r4, #4]
 800715e:	6863      	ldr	r3, [r4, #4]
 8007160:	6123      	str	r3, [r4, #16]
 8007162:	2300      	movs	r3, #0
 8007164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007168:	e7aa      	b.n	80070c0 <_printf_i+0x148>
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	4632      	mov	r2, r6
 800716e:	4649      	mov	r1, r9
 8007170:	4640      	mov	r0, r8
 8007172:	47d0      	blx	sl
 8007174:	3001      	adds	r0, #1
 8007176:	d0ad      	beq.n	80070d4 <_printf_i+0x15c>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	079b      	lsls	r3, r3, #30
 800717c:	d413      	bmi.n	80071a6 <_printf_i+0x22e>
 800717e:	68e0      	ldr	r0, [r4, #12]
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	4298      	cmp	r0, r3
 8007184:	bfb8      	it	lt
 8007186:	4618      	movlt	r0, r3
 8007188:	e7a6      	b.n	80070d8 <_printf_i+0x160>
 800718a:	2301      	movs	r3, #1
 800718c:	4632      	mov	r2, r6
 800718e:	4649      	mov	r1, r9
 8007190:	4640      	mov	r0, r8
 8007192:	47d0      	blx	sl
 8007194:	3001      	adds	r0, #1
 8007196:	d09d      	beq.n	80070d4 <_printf_i+0x15c>
 8007198:	3501      	adds	r5, #1
 800719a:	68e3      	ldr	r3, [r4, #12]
 800719c:	9903      	ldr	r1, [sp, #12]
 800719e:	1a5b      	subs	r3, r3, r1
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	dcf2      	bgt.n	800718a <_printf_i+0x212>
 80071a4:	e7eb      	b.n	800717e <_printf_i+0x206>
 80071a6:	2500      	movs	r5, #0
 80071a8:	f104 0619 	add.w	r6, r4, #25
 80071ac:	e7f5      	b.n	800719a <_printf_i+0x222>
 80071ae:	bf00      	nop
 80071b0:	080072dd 	.word	0x080072dd
 80071b4:	080072ee 	.word	0x080072ee

080071b8 <memmove>:
 80071b8:	4288      	cmp	r0, r1
 80071ba:	b510      	push	{r4, lr}
 80071bc:	eb01 0402 	add.w	r4, r1, r2
 80071c0:	d902      	bls.n	80071c8 <memmove+0x10>
 80071c2:	4284      	cmp	r4, r0
 80071c4:	4623      	mov	r3, r4
 80071c6:	d807      	bhi.n	80071d8 <memmove+0x20>
 80071c8:	1e43      	subs	r3, r0, #1
 80071ca:	42a1      	cmp	r1, r4
 80071cc:	d008      	beq.n	80071e0 <memmove+0x28>
 80071ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071d6:	e7f8      	b.n	80071ca <memmove+0x12>
 80071d8:	4402      	add	r2, r0
 80071da:	4601      	mov	r1, r0
 80071dc:	428a      	cmp	r2, r1
 80071de:	d100      	bne.n	80071e2 <memmove+0x2a>
 80071e0:	bd10      	pop	{r4, pc}
 80071e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ea:	e7f7      	b.n	80071dc <memmove+0x24>

080071ec <_sbrk_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d06      	ldr	r5, [pc, #24]	@ (8007208 <_sbrk_r+0x1c>)
 80071f0:	2300      	movs	r3, #0
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	602b      	str	r3, [r5, #0]
 80071f8:	f7fa fac0 	bl	800177c <_sbrk>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d102      	bne.n	8007206 <_sbrk_r+0x1a>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	b103      	cbz	r3, 8007206 <_sbrk_r+0x1a>
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	200004f4 	.word	0x200004f4

0800720c <_realloc_r>:
 800720c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007210:	4680      	mov	r8, r0
 8007212:	4615      	mov	r5, r2
 8007214:	460c      	mov	r4, r1
 8007216:	b921      	cbnz	r1, 8007222 <_realloc_r+0x16>
 8007218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800721c:	4611      	mov	r1, r2
 800721e:	f7ff bc59 	b.w	8006ad4 <_malloc_r>
 8007222:	b92a      	cbnz	r2, 8007230 <_realloc_r+0x24>
 8007224:	f7ff fbea 	bl	80069fc <_free_r>
 8007228:	2400      	movs	r4, #0
 800722a:	4620      	mov	r0, r4
 800722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007230:	f000 f81a 	bl	8007268 <_malloc_usable_size_r>
 8007234:	4285      	cmp	r5, r0
 8007236:	4606      	mov	r6, r0
 8007238:	d802      	bhi.n	8007240 <_realloc_r+0x34>
 800723a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800723e:	d8f4      	bhi.n	800722a <_realloc_r+0x1e>
 8007240:	4629      	mov	r1, r5
 8007242:	4640      	mov	r0, r8
 8007244:	f7ff fc46 	bl	8006ad4 <_malloc_r>
 8007248:	4607      	mov	r7, r0
 800724a:	2800      	cmp	r0, #0
 800724c:	d0ec      	beq.n	8007228 <_realloc_r+0x1c>
 800724e:	42b5      	cmp	r5, r6
 8007250:	462a      	mov	r2, r5
 8007252:	4621      	mov	r1, r4
 8007254:	bf28      	it	cs
 8007256:	4632      	movcs	r2, r6
 8007258:	f7ff fbc2 	bl	80069e0 <memcpy>
 800725c:	4621      	mov	r1, r4
 800725e:	4640      	mov	r0, r8
 8007260:	f7ff fbcc 	bl	80069fc <_free_r>
 8007264:	463c      	mov	r4, r7
 8007266:	e7e0      	b.n	800722a <_realloc_r+0x1e>

08007268 <_malloc_usable_size_r>:
 8007268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800726c:	1f18      	subs	r0, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	bfbc      	itt	lt
 8007272:	580b      	ldrlt	r3, [r1, r0]
 8007274:	18c0      	addlt	r0, r0, r3
 8007276:	4770      	bx	lr

08007278 <_init>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr

08007284 <_fini>:
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	bf00      	nop
 8007288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728a:	bc08      	pop	{r3}
 800728c:	469e      	mov	lr, r3
 800728e:	4770      	bx	lr
